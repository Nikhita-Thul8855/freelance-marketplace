const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
  // Message identification
  messageId: {
    type: String,
    unique: true,
    // Don't require on creation - will be generated by pre-save hook
    sparse: true
  },
  
  // Conversation participants
  sender: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  receiver: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Message content
  content: {
    type: String,
    required: true,
    maxlength: 1000
  },
  
  // Message type
  type: {
    type: String,
    enum: ['text', 'file', 'image', 'system'],
    default: 'text'
  },
  
  // File attachment (if any)
  attachment: {
    filename: String,
    path: String,
    size: Number,
    mimetype: String
  },
  
  // Message status
  status: {
    type: String,
    enum: ['sent', 'delivered', 'read'],
    default: 'sent'
  },
  
  // Related order/gig (optional)
  relatedOrder: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Order'
  },
  relatedGig: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Gig'
  },
  
  // Read timestamp
  readAt: {
    type: Date
  }
}, {
  timestamps: true
});

// Generate unique message ID
messageSchema.pre('save', async function(next) {
  if (!this.messageId) {
    this.messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    console.log('âœ… Generated messageId:', this.messageId);
  }
  next();
});

// Index for faster queries
messageSchema.index({ sender: 1, receiver: 1, createdAt: -1 });
// messageId index removed - already created by unique: true

module.exports = mongoose.model('Message', messageSchema);

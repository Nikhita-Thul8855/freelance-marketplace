{"ast":null,"code":"import { z } from 'zod';\n\n// Register schema\nexport const registerSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name cannot exceed 50 characters').trim(),\n  email: z.string().email('Please enter a valid email address').toLowerCase(),\n  password: z.string().min(6, 'Password must be at least 6 characters').max(128, 'Password cannot exceed 128 characters'),\n  confirmPassword: z.string(),\n  role: z.enum(['client', 'freelancer'], {\n    required_error: 'Please select a role'\n  })\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required')\n});\n\n// Profile update schema\nexport const profileSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name cannot exceed 50 characters').trim(),\n  bio: z.string().max(500, 'Bio cannot exceed 500 characters').optional(),\n  skills: z.array(z.string()).optional(),\n  hourlyRate: z.string().transform(val => val === '' ? undefined : Number(val)).refine(val => val === undefined || !isNaN(val) && val >= 0, 'Hourly rate cannot be negative').optional(),\n  location: z.string().max(100, 'Location cannot exceed 100 characters').optional(),\n  phone: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number').optional(),\n  portfolio: z.string().url('Please enter a valid URL').optional().or(z.literal(''))\n});\n\n// Gig validation schema\nexport const gigSchema = z.object({\n  title: z.string().min(10, 'Title must be at least 10 characters').max(100, 'Title cannot exceed 100 characters'),\n  description: z.string().min(50, 'Description must be at least 50 characters').max(1000, 'Description cannot exceed 1000 characters'),\n  price: z.string().transform(val => Number(val)).refine(val => !isNaN(val) && val >= 5, 'Price must be at least $5').refine(val => !isNaN(val) && val <= 10000, 'Price cannot exceed $10,000'),\n  category: z.string().min(1, 'Please select a category'),\n  deliveryTime: z.string().transform(val => Number(val)).refine(val => !isNaN(val) && val >= 1, 'Delivery time must be at least 1 day').refine(val => !isNaN(val) && val <= 30, 'Delivery time cannot exceed 30 days'),\n  tags: z.array(z.string()).min(1, 'Please add at least one tag').max(5, 'Maximum 5 tags allowed'),\n  images: z.array(z.any()).max(5, 'Maximum 5 images allowed').optional()\n});","map":{"version":3,"names":["z","registerSchema","object","name","string","min","max","trim","email","toLowerCase","password","confirmPassword","role","enum","required_error","refine","data","message","path","loginSchema","profileSchema","bio","optional","skills","array","hourlyRate","transform","val","undefined","Number","isNaN","location","phone","regex","portfolio","url","or","literal","gigSchema","title","description","price","category","deliveryTime","tags","images","any"],"sources":["C:/Users/PC/freelance-marketplace/client/src/utils/validationSchemas.js"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Register schema\r\nexport const registerSchema = z.object({\r\n  name: z.string()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(50, 'Name cannot exceed 50 characters')\r\n    .trim(),\r\n  email: z.string()\r\n    .email('Please enter a valid email address')\r\n    .toLowerCase(),\r\n  password: z.string()\r\n    .min(6, 'Password must be at least 6 characters')\r\n    .max(128, 'Password cannot exceed 128 characters'),\r\n  confirmPassword: z.string(),\r\n  role: z.enum(['client', 'freelancer'], {\r\n    required_error: 'Please select a role'\r\n  })\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: \"Passwords don't match\",\r\n  path: [\"confirmPassword\"]\r\n});\r\n\r\n// Login schema\r\nexport const loginSchema = z.object({\r\n  email: z.string()\r\n    .email('Please enter a valid email address'),\r\n  password: z.string()\r\n    .min(1, 'Password is required')\r\n});\r\n\r\n// Profile update schema\r\nexport const profileSchema = z.object({\r\n  name: z.string()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(50, 'Name cannot exceed 50 characters')\r\n    .trim(),\r\n  bio: z.string()\r\n    .max(500, 'Bio cannot exceed 500 characters')\r\n    .optional(),\r\n  skills: z.array(z.string())\r\n    .optional(),\r\n  hourlyRate: z.string()\r\n    .transform((val) => val === '' ? undefined : Number(val))\r\n    .refine((val) => val === undefined || (!isNaN(val) && val >= 0), 'Hourly rate cannot be negative')\r\n    .optional(),\r\n  location: z.string()\r\n    .max(100, 'Location cannot exceed 100 characters')\r\n    .optional(),\r\n  phone: z.string()\r\n    .regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number')\r\n    .optional(),\r\n  portfolio: z.string()\r\n    .url('Please enter a valid URL')\r\n    .optional()\r\n    .or(z.literal(''))\r\n});\r\n\r\n// Gig validation schema\r\nexport const gigSchema = z.object({\r\n  title: z.string()\r\n    .min(10, 'Title must be at least 10 characters')\r\n    .max(100, 'Title cannot exceed 100 characters'),\r\n  \r\n  description: z.string()\r\n    .min(50, 'Description must be at least 50 characters')\r\n    .max(1000, 'Description cannot exceed 1000 characters'),\r\n  \r\n  price: z.string()\r\n    .transform((val) => Number(val))\r\n    .refine((val) => !isNaN(val) && val >= 5, 'Price must be at least $5')\r\n    .refine((val) => !isNaN(val) && val <= 10000, 'Price cannot exceed $10,000'),\r\n  \r\n  category: z.string()\r\n    .min(1, 'Please select a category'),\r\n  \r\n  deliveryTime: z.string()\r\n    .transform((val) => Number(val))\r\n    .refine((val) => !isNaN(val) && val >= 1, 'Delivery time must be at least 1 day')\r\n    .refine((val) => !isNaN(val) && val <= 30, 'Delivery time cannot exceed 30 days'),\r\n  \r\n  tags: z.array(z.string())\r\n    .min(1, 'Please add at least one tag')\r\n    .max(5, 'Maximum 5 tags allowed'),\r\n  \r\n  images: z.array(z.any())\r\n    .max(5, 'Maximum 5 images allowed')\r\n    .optional()\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
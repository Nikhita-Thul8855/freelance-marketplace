{"ast":null,"code":"import * as util from \"../core/util.js\";\nfunction getRussianPlural(count, one, few, many) {\n  const absCount = Math.abs(count);\n  const lastDigit = absCount % 10;\n  const lastTwoDigits = absCount % 100;\n  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n    return many;\n  }\n  if (lastDigit === 1) {\n    return one;\n  }\n  if (lastDigit >= 2 && lastDigit <= 4) {\n    return few;\n  }\n  return many;\n}\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: {\n        one: \"символ\",\n        few: \"символа\",\n        many: \"символов\"\n      },\n      verb: \"иметь\"\n    },\n    file: {\n      unit: {\n        one: \"байт\",\n        few: \"байта\",\n        many: \"байт\"\n      },\n      verb: \"иметь\"\n    },\n    array: {\n      unit: {\n        one: \"элемент\",\n        few: \"элемента\",\n        many: \"элементов\"\n      },\n      verb: \"иметь\"\n    },\n    set: {\n      unit: {\n        one: \"элемент\",\n        few: \"элемента\",\n        many: \"элементов\"\n      },\n      verb: \"иметь\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"число\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"массив\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"ввод\",\n    email: \"email адрес\",\n    url: \"URL\",\n    emoji: \"эмодзи\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO дата и время\",\n    date: \"ISO дата\",\n    time: \"ISO время\",\n    duration: \"ISO длительность\",\n    ipv4: \"IPv4 адрес\",\n    ipv6: \"IPv6 адрес\",\n    cidrv4: \"IPv4 диапазон\",\n    cidrv6: \"IPv6 диапазон\",\n    base64: \"строка в формате base64\",\n    base64url: \"строка в формате base64url\",\n    json_string: \"JSON строка\",\n    e164: \"номер E.164\",\n    jwt: \"JWT\",\n    template_literal: \"ввод\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Неверный ввод: ожидалось ${issue.expected}, получено ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Неверный ввод: ожидалось ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Неверный вариант: ожидалось одно из ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const maxValue = Number(issue.maximum);\n            const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет иметь ${adj}${issue.maximum.toString()} ${unit}`;\n          }\n          return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const minValue = Number(issue.minimum);\n            const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет иметь ${adj}${issue.minimum.toString()} ${unit}`;\n          }\n          return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `Неверная строка: должна начинаться с \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `Неверная строка: должна заканчиваться на \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Неверная строка: должна содержать \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;\n          return `Неверный ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Неверное число: должно быть кратным ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Нераспознанн${issue.keys.length > 1 ? \"ые\" : \"ый\"} ключ${issue.keys.length > 1 ? \"и\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Неверный ключ в ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Неверные входные данные\";\n      case \"invalid_element\":\n        return `Неверное значение в ${issue.origin}`;\n      default:\n        return `Неверные входные данные`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
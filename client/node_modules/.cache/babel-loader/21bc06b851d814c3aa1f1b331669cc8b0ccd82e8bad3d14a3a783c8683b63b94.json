{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"znaků\",\n      verb: \"mít\"\n    },\n    file: {\n      unit: \"bajtů\",\n      verb: \"mít\"\n    },\n    array: {\n      unit: \"prvků\",\n      verb: \"mít\"\n    },\n    set: {\n      unit: \"prvků\",\n      verb: \"mít\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"číslo\";\n        }\n      case \"string\":\n        {\n          return \"řetězec\";\n        }\n      case \"boolean\":\n        {\n          return \"boolean\";\n        }\n      case \"bigint\":\n        {\n          return \"bigint\";\n        }\n      case \"function\":\n        {\n          return \"funkce\";\n        }\n      case \"symbol\":\n        {\n          return \"symbol\";\n        }\n      case \"undefined\":\n        {\n          return \"undefined\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"pole\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"regulární výraz\",\n    email: \"e-mailová adresa\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"datum a čas ve formátu ISO\",\n    date: \"datum ve formátu ISO\",\n    time: \"čas ve formátu ISO\",\n    duration: \"doba trvání ISO\",\n    ipv4: \"IPv4 adresa\",\n    ipv6: \"IPv6 adresa\",\n    cidrv4: \"rozsah IPv4\",\n    cidrv6: \"rozsah IPv6\",\n    base64: \"řetězec zakódovaný ve formátu base64\",\n    base64url: \"řetězec zakódovaný ve formátu base64url\",\n    json_string: \"řetězec ve formátu JSON\",\n    e164: \"číslo E.164\",\n    jwt: \"JWT\",\n    template_literal: \"vstup\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Neplatný vstup: očekáváno ${issue.expected}, obdrženo ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Neplatný vstup: očekáváno ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Neplatná možnost: očekávána jedna z hodnot ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"prvků\"}`;\n          }\n          return `Hodnota je příliš velká: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí mít ${adj}${issue.minimum.toString()} ${sizing.unit ?? \"prvků\"}`;\n          }\n          return `Hodnota je příliš malá: ${issue.origin ?? \"hodnota\"} musí být ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `Neplatný řetězec: musí začínat na \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `Neplatný řetězec: musí končit na \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Neplatný řetězec: musí obsahovat \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Neplatný řetězec: musí odpovídat vzoru ${_issue.pattern}`;\n          return `Neplatný formát ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Neplatné číslo: musí být násobkem ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Neznámé klíče: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Neplatný klíč v ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Neplatný vstup\";\n      case \"invalid_element\":\n        return `Neplatná hodnota v ${issue.origin}`;\n      default:\n        return `Neplatný vstup`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
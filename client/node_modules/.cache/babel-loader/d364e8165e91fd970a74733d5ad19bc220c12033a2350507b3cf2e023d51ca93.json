{"ast":null,"code":"import api from './api';\nclass OrderService {\n  // Create a new order\n  async createOrder(gigId, requirements = '', notes = '') {\n    try {\n      const response = await api.post('/orders', {\n        gigId,\n        requirements,\n        notes\n      });\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create order'\n      };\n    }\n  }\n\n  // Get orders for current user\n  async getOrders(params = {}) {\n    try {\n      const queryParams = new URLSearchParams();\n      if (params.status) queryParams.append('status', params.status);\n      if (params.page) queryParams.append('page', params.page.toString());\n      if (params.limit) queryParams.append('limit', params.limit.toString());\n      const response = await api.get(`/orders?${queryParams.toString()}`);\n      return {\n        success: true,\n        data: response.data.data,\n        pagination: response.data.pagination\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch orders'\n      };\n    }\n  }\n\n  // Get single order by ID\n  async getOrderById(orderId) {\n    try {\n      const response = await api.get(`/orders/${orderId}`);\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch order'\n      };\n    }\n  }\n\n  // Update order status\n  async updateOrderStatus(orderId, status) {\n    try {\n      const response = await api.put(`/orders/${orderId}/status`, {\n        status\n      });\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update order status'\n      };\n    }\n  }\n\n  // Get order statistics\n  async getOrderStats() {\n    try {\n      const response = await api.get('/orders/stats');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to fetch order statistics'\n      };\n    }\n  }\n\n  // Helper method to get status badge color\n  getStatusColor(status) {\n    const colors = {\n      pending: 'bg-yellow-100 text-yellow-800',\n      paid: 'bg-blue-100 text-blue-800',\n      in_progress: 'bg-orange-100 text-orange-800',\n      completed: 'bg-green-100 text-green-800',\n      cancelled: 'bg-red-100 text-red-800',\n      refunded: 'bg-gray-100 text-gray-800'\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  }\n\n  // Helper method to get status display text\n  getStatusText(status) {\n    const texts = {\n      pending: 'Pending',\n      paid: 'Paid',\n      in_progress: 'In Progress',\n      completed: 'Completed',\n      cancelled: 'Cancelled',\n      refunded: 'Refunded'\n    };\n    return texts[status] || status;\n  }\n\n  // Helper method to check if status can be updated by user role\n  canUpdateStatus(order, userRole, newStatus) {\n    const currentStatus = order.status;\n    if (userRole === 'freelancer') {\n      // Freelancer can mark paid orders as in_progress\n      if (currentStatus === 'paid' && newStatus === 'in_progress') return true;\n      // Freelancer can mark in_progress orders as completed\n      if (currentStatus === 'in_progress' && newStatus === 'completed') return true;\n      // Freelancer can cancel orders\n      if (newStatus === 'cancelled') return true;\n    }\n    if (userRole === 'client') {\n      // Client can cancel orders\n      if (newStatus === 'cancelled') return true;\n    }\n    return false;\n  }\n}\nexport default new OrderService();","map":{"version":3,"names":["api","OrderService","createOrder","gigId","requirements","notes","response","post","success","data","error","_error$response","_error$response$data","message","getOrders","params","queryParams","URLSearchParams","status","append","page","toString","limit","get","pagination","_error$response2","_error$response2$data","getOrderById","orderId","_error$response3","_error$response3$data","updateOrderStatus","put","_error$response4","_error$response4$data","getOrderStats","_error$response5","_error$response5$data","getStatusColor","colors","pending","paid","in_progress","completed","cancelled","refunded","getStatusText","texts","canUpdateStatus","order","userRole","newStatus","currentStatus"],"sources":["C:/Users/PC/freelance-marketplace/client/src/services/orderService.js"],"sourcesContent":["import api from './api';\r\n\r\nclass OrderService {\r\n  // Create a new order\r\n  async createOrder(gigId, requirements = '', notes = '') {\r\n    try {\r\n      const response = await api.post('/orders', {\r\n        gigId,\r\n        requirements,\r\n        notes\r\n      });\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to create order'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get orders for current user\r\n  async getOrders(params = {}) {\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      \r\n      if (params.status) queryParams.append('status', params.status);\r\n      if (params.page) queryParams.append('page', params.page.toString());\r\n      if (params.limit) queryParams.append('limit', params.limit.toString());\r\n\r\n      const response = await api.get(`/orders?${queryParams.toString()}`);\r\n      return {\r\n        success: true,\r\n        data: response.data.data,\r\n        pagination: response.data.pagination\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch orders'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get single order by ID\r\n  async getOrderById(orderId) {\r\n    try {\r\n      const response = await api.get(`/orders/${orderId}`);\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch order'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update order status\r\n  async updateOrderStatus(orderId, status) {\r\n    try {\r\n      const response = await api.put(`/orders/${orderId}/status`, { status });\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to update order status'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get order statistics\r\n  async getOrderStats() {\r\n    try {\r\n      const response = await api.get('/orders/stats');\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch order statistics'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Helper method to get status badge color\r\n  getStatusColor(status) {\r\n    const colors = {\r\n      pending: 'bg-yellow-100 text-yellow-800',\r\n      paid: 'bg-blue-100 text-blue-800',\r\n      in_progress: 'bg-orange-100 text-orange-800',\r\n      completed: 'bg-green-100 text-green-800',\r\n      cancelled: 'bg-red-100 text-red-800',\r\n      refunded: 'bg-gray-100 text-gray-800'\r\n    };\r\n    return colors[status] || 'bg-gray-100 text-gray-800';\r\n  }\r\n\r\n  // Helper method to get status display text\r\n  getStatusText(status) {\r\n    const texts = {\r\n      pending: 'Pending',\r\n      paid: 'Paid',\r\n      in_progress: 'In Progress',\r\n      completed: 'Completed',\r\n      cancelled: 'Cancelled',\r\n      refunded: 'Refunded'\r\n    };\r\n    return texts[status] || status;\r\n  }\r\n\r\n  // Helper method to check if status can be updated by user role\r\n  canUpdateStatus(order, userRole, newStatus) {\r\n    const currentStatus = order.status;\r\n    \r\n    if (userRole === 'freelancer') {\r\n      // Freelancer can mark paid orders as in_progress\r\n      if (currentStatus === 'paid' && newStatus === 'in_progress') return true;\r\n      // Freelancer can mark in_progress orders as completed\r\n      if (currentStatus === 'in_progress' && newStatus === 'completed') return true;\r\n      // Freelancer can cancel orders\r\n      if (newStatus === 'cancelled') return true;\r\n    }\r\n    \r\n    if (userRole === 'client') {\r\n      // Client can cancel orders\r\n      if (newStatus === 'cancelled') return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}\r\n\r\nexport default new OrderService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
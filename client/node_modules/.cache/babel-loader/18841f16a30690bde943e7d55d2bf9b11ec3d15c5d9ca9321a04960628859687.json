{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.callbacks = new Map();\n  }\n\n  // Initialize socket connection\n  connect(token) {\n    console.log('üîó Initializing Socket.io connection...');\n    if (this.socket && this.connected) {\n      console.log('‚úÖ Socket already connected');\n      return this.socket;\n    }\n    try {\n      this.socket = io('http://localhost:5000', {\n        auth: {\n          token: token\n        },\n        transports: ['websocket', 'polling'],\n        timeout: 10000,\n        forceNew: true\n      });\n      this.setupEventListeners();\n      return this.socket;\n    } catch (error) {\n      console.error('‚ùå Socket connection failed:', error);\n      throw error;\n    }\n  }\n\n  // Setup event listeners\n  setupEventListeners() {\n    if (!this.socket) return;\n    this.socket.on('connect', () => {\n      console.log('üü¢ Socket.io connected successfully');\n      console.log('üì± Socket ID:', this.socket.id);\n      this.connected = true;\n      this.triggerCallback('connected', {\n        socketId: this.socket.id\n      });\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('üî¥ Socket.io disconnected:', reason);\n      this.connected = false;\n      this.triggerCallback('disconnected', {\n        reason\n      });\n    });\n    this.socket.on('connect_error', error => {\n      console.error('‚ùå Socket connection error:', error);\n      this.connected = false;\n      this.triggerCallback('connect_error', {\n        error\n      });\n    });\n\n    // Real-time message events\n    this.socket.on('new-message', data => {\n      console.log('üì® New message received:', data);\n      this.triggerCallback('new-message', data);\n    });\n    this.socket.on('message-notification', data => {\n      console.log('üîî Message notification:', data);\n      this.triggerCallback('message-notification', data);\n    });\n    this.socket.on('message-error', data => {\n      console.error('‚ùå Message error:', data);\n      this.triggerCallback('message-error', data);\n    });\n\n    // Typing indicators\n    this.socket.on('user-typing', data => {\n      console.log('‚å®Ô∏è User typing:', data);\n      this.triggerCallback('user-typing', data);\n    });\n    this.socket.on('user-stop-typing', data => {\n      console.log('‚å®Ô∏è User stopped typing:', data);\n      this.triggerCallback('user-stop-typing', data);\n    });\n\n    // User status events\n    this.socket.on('user-online', data => {\n      console.log('üü¢ User came online:', data);\n      this.triggerCallback('user-online', data);\n    });\n    this.socket.on('user-offline', data => {\n      console.log('üî¥ User went offline:', data);\n      this.triggerCallback('user-offline', data);\n    });\n\n    // Message read receipts\n    this.socket.on('message-read', data => {\n      console.log('‚úÖ Message read:', data);\n      this.triggerCallback('message-read', data);\n    });\n\n    // Conversation updates\n    this.socket.on('conversation-update', data => {\n      console.log('üí¨ Conversation updated:', data);\n      this.triggerCallback('conversation-update', data);\n    });\n  }\n\n  // Join a conversation room\n  joinConversation(otherUserId) {\n    if (!this.socket || !this.connected) {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot join conversation');\n      return;\n    }\n    console.log(`üè† Joining conversation with user: ${otherUserId}`);\n    this.socket.emit('join-conversation', otherUserId);\n  }\n\n  // Leave a conversation room\n  leaveConversation(otherUserId) {\n    if (!this.socket || !this.connected) {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot leave conversation');\n      return;\n    }\n    console.log(`üö™ Leaving conversation with user: ${otherUserId}`);\n    this.socket.emit('leave-conversation', otherUserId);\n  }\n\n  // Send a real-time message\n  sendMessage(receiverId, content, type = 'text') {\n    if (!this.socket || !this.connected) {\n      console.warn('‚ö†Ô∏è Socket not connected, cannot send message');\n      return Promise.reject(new Error('Socket not connected'));\n    }\n    console.log('üì§ Sending real-time message:', {\n      receiverId,\n      content,\n      type\n    });\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Message send timeout'));\n      }, 10000);\n\n      // Listen for response\n      const messageHandler = data => {\n        clearTimeout(timeout);\n        this.socket.off('new-message', messageHandler);\n        this.socket.off('message-error', errorHandler);\n        resolve(data);\n      };\n      const errorHandler = error => {\n        clearTimeout(timeout);\n        this.socket.off('new-message', messageHandler);\n        this.socket.off('message-error', errorHandler);\n        reject(error);\n      };\n      this.socket.once('new-message', messageHandler);\n      this.socket.once('message-error', errorHandler);\n\n      // Send the message\n      this.socket.emit('send-message', {\n        receiverId,\n        content,\n        type\n      });\n    });\n  }\n\n  // Send typing indicator\n  startTyping(receiverId) {\n    if (!this.socket || !this.connected) return;\n    console.log(`‚å®Ô∏è Started typing to: ${receiverId}`);\n    this.socket.emit('typing', {\n      receiverId\n    });\n  }\n\n  // Stop typing indicator\n  stopTyping(receiverId) {\n    if (!this.socket || !this.connected) return;\n    console.log(`‚å®Ô∏è Stopped typing to: ${receiverId}`);\n    this.socket.emit('stop-typing', {\n      receiverId\n    });\n  }\n\n  // Mark message as read\n  markMessageAsRead(messageId, conversationRoom) {\n    if (!this.socket || !this.connected) return;\n    console.log(`‚úÖ Marking message as read: ${messageId}`);\n    this.socket.emit('mark-message-read', {\n      messageId,\n      conversationRoom\n    });\n  }\n\n  // Register callback for events\n  on(event, callback) {\n    if (!this.callbacks.has(event)) {\n      this.callbacks.set(event, []);\n    }\n    this.callbacks.get(event).push(callback);\n  }\n\n  // Unregister callback\n  off(event, callback) {\n    if (!this.callbacks.has(event)) return;\n    const callbacks = this.callbacks.get(event);\n    const index = callbacks.indexOf(callback);\n    if (index > -1) {\n      callbacks.splice(index, 1);\n    }\n  }\n\n  // Trigger callbacks\n  triggerCallback(event, data) {\n    if (!this.callbacks.has(event)) return;\n    this.callbacks.get(event).forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`‚ùå Error in ${event} callback:`, error);\n      }\n    });\n  }\n\n  // Disconnect socket\n  disconnect() {\n    if (this.socket) {\n      console.log('üî¥ Disconnecting Socket.io...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.connected = false;\n      this.callbacks.clear();\n    }\n  }\n\n  // Get connection status\n  isConnected() {\n    var _this$socket;\n    return this.connected && ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.connected);\n  }\n\n  // Get socket instance\n  getSocket() {\n    return this.socket;\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","connected","callbacks","Map","connect","token","console","log","auth","transports","timeout","forceNew","setupEventListeners","error","on","id","triggerCallback","socketId","reason","data","joinConversation","otherUserId","warn","emit","leaveConversation","sendMessage","receiverId","content","type","Promise","reject","Error","resolve","setTimeout","messageHandler","clearTimeout","off","errorHandler","once","startTyping","stopTyping","markMessageAsRead","messageId","conversationRoom","event","callback","has","set","get","push","index","indexOf","splice","forEach","disconnect","clear","isConnected","_this$socket","getSocket","socketService"],"sources":["C:/Users/PC/freelance-marketplace/client/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.connected = false;\r\n    this.callbacks = new Map();\r\n  }\r\n\r\n  // Initialize socket connection\r\n  connect(token) {\r\n    console.log('üîó Initializing Socket.io connection...');\r\n    \r\n    if (this.socket && this.connected) {\r\n      console.log('‚úÖ Socket already connected');\r\n      return this.socket;\r\n    }\r\n\r\n    try {\r\n      this.socket = io('http://localhost:5000', {\r\n        auth: {\r\n          token: token\r\n        },\r\n        transports: ['websocket', 'polling'],\r\n        timeout: 10000,\r\n        forceNew: true\r\n      });\r\n\r\n      this.setupEventListeners();\r\n      return this.socket;\r\n    } catch (error) {\r\n      console.error('‚ùå Socket connection failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Setup event listeners\r\n  setupEventListeners() {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('üü¢ Socket.io connected successfully');\r\n      console.log('üì± Socket ID:', this.socket.id);\r\n      this.connected = true;\r\n      this.triggerCallback('connected', { socketId: this.socket.id });\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log('üî¥ Socket.io disconnected:', reason);\r\n      this.connected = false;\r\n      this.triggerCallback('disconnected', { reason });\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('‚ùå Socket connection error:', error);\r\n      this.connected = false;\r\n      this.triggerCallback('connect_error', { error });\r\n    });\r\n\r\n    // Real-time message events\r\n    this.socket.on('new-message', (data) => {\r\n      console.log('üì® New message received:', data);\r\n      this.triggerCallback('new-message', data);\r\n    });\r\n\r\n    this.socket.on('message-notification', (data) => {\r\n      console.log('üîî Message notification:', data);\r\n      this.triggerCallback('message-notification', data);\r\n    });\r\n\r\n    this.socket.on('message-error', (data) => {\r\n      console.error('‚ùå Message error:', data);\r\n      this.triggerCallback('message-error', data);\r\n    });\r\n\r\n    // Typing indicators\r\n    this.socket.on('user-typing', (data) => {\r\n      console.log('‚å®Ô∏è User typing:', data);\r\n      this.triggerCallback('user-typing', data);\r\n    });\r\n\r\n    this.socket.on('user-stop-typing', (data) => {\r\n      console.log('‚å®Ô∏è User stopped typing:', data);\r\n      this.triggerCallback('user-stop-typing', data);\r\n    });\r\n\r\n    // User status events\r\n    this.socket.on('user-online', (data) => {\r\n      console.log('üü¢ User came online:', data);\r\n      this.triggerCallback('user-online', data);\r\n    });\r\n\r\n    this.socket.on('user-offline', (data) => {\r\n      console.log('üî¥ User went offline:', data);\r\n      this.triggerCallback('user-offline', data);\r\n    });\r\n\r\n    // Message read receipts\r\n    this.socket.on('message-read', (data) => {\r\n      console.log('‚úÖ Message read:', data);\r\n      this.triggerCallback('message-read', data);\r\n    });\r\n\r\n    // Conversation updates\r\n    this.socket.on('conversation-update', (data) => {\r\n      console.log('üí¨ Conversation updated:', data);\r\n      this.triggerCallback('conversation-update', data);\r\n    });\r\n  }\r\n\r\n  // Join a conversation room\r\n  joinConversation(otherUserId) {\r\n    if (!this.socket || !this.connected) {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot join conversation');\r\n      return;\r\n    }\r\n\r\n    console.log(`üè† Joining conversation with user: ${otherUserId}`);\r\n    this.socket.emit('join-conversation', otherUserId);\r\n  }\r\n\r\n  // Leave a conversation room\r\n  leaveConversation(otherUserId) {\r\n    if (!this.socket || !this.connected) {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot leave conversation');\r\n      return;\r\n    }\r\n\r\n    console.log(`üö™ Leaving conversation with user: ${otherUserId}`);\r\n    this.socket.emit('leave-conversation', otherUserId);\r\n  }\r\n\r\n  // Send a real-time message\r\n  sendMessage(receiverId, content, type = 'text') {\r\n    if (!this.socket || !this.connected) {\r\n      console.warn('‚ö†Ô∏è Socket not connected, cannot send message');\r\n      return Promise.reject(new Error('Socket not connected'));\r\n    }\r\n\r\n    console.log('üì§ Sending real-time message:', { receiverId, content, type });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error('Message send timeout'));\r\n      }, 10000);\r\n\r\n      // Listen for response\r\n      const messageHandler = (data) => {\r\n        clearTimeout(timeout);\r\n        this.socket.off('new-message', messageHandler);\r\n        this.socket.off('message-error', errorHandler);\r\n        resolve(data);\r\n      };\r\n\r\n      const errorHandler = (error) => {\r\n        clearTimeout(timeout);\r\n        this.socket.off('new-message', messageHandler);\r\n        this.socket.off('message-error', errorHandler);\r\n        reject(error);\r\n      };\r\n\r\n      this.socket.once('new-message', messageHandler);\r\n      this.socket.once('message-error', errorHandler);\r\n\r\n      // Send the message\r\n      this.socket.emit('send-message', {\r\n        receiverId,\r\n        content,\r\n        type\r\n      });\r\n    });\r\n  }\r\n\r\n  // Send typing indicator\r\n  startTyping(receiverId) {\r\n    if (!this.socket || !this.connected) return;\r\n    \r\n    console.log(`‚å®Ô∏è Started typing to: ${receiverId}`);\r\n    this.socket.emit('typing', { receiverId });\r\n  }\r\n\r\n  // Stop typing indicator\r\n  stopTyping(receiverId) {\r\n    if (!this.socket || !this.connected) return;\r\n    \r\n    console.log(`‚å®Ô∏è Stopped typing to: ${receiverId}`);\r\n    this.socket.emit('stop-typing', { receiverId });\r\n  }\r\n\r\n  // Mark message as read\r\n  markMessageAsRead(messageId, conversationRoom) {\r\n    if (!this.socket || !this.connected) return;\r\n    \r\n    console.log(`‚úÖ Marking message as read: ${messageId}`);\r\n    this.socket.emit('mark-message-read', { messageId, conversationRoom });\r\n  }\r\n\r\n  // Register callback for events\r\n  on(event, callback) {\r\n    if (!this.callbacks.has(event)) {\r\n      this.callbacks.set(event, []);\r\n    }\r\n    this.callbacks.get(event).push(callback);\r\n  }\r\n\r\n  // Unregister callback\r\n  off(event, callback) {\r\n    if (!this.callbacks.has(event)) return;\r\n    \r\n    const callbacks = this.callbacks.get(event);\r\n    const index = callbacks.indexOf(callback);\r\n    if (index > -1) {\r\n      callbacks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // Trigger callbacks\r\n  triggerCallback(event, data) {\r\n    if (!this.callbacks.has(event)) return;\r\n    \r\n    this.callbacks.get(event).forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (error) {\r\n        console.error(`‚ùå Error in ${event} callback:`, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Disconnect socket\r\n  disconnect() {\r\n    if (this.socket) {\r\n      console.log('üî¥ Disconnecting Socket.io...');\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connected = false;\r\n      this.callbacks.clear();\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  isConnected() {\r\n    return this.connected && this.socket?.connected;\r\n  }\r\n\r\n  // Get socket instance\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socketService = new SocketService();\r\nexport default socketService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
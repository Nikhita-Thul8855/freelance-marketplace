{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"merkkiä\",\n      subject: \"merkkijonon\"\n    },\n    file: {\n      unit: \"tavua\",\n      subject: \"tiedoston\"\n    },\n    array: {\n      unit: \"alkiota\",\n      subject: \"listan\"\n    },\n    set: {\n      unit: \"alkiota\",\n      subject: \"joukon\"\n    },\n    number: {\n      unit: \"\",\n      subject: \"luvun\"\n    },\n    bigint: {\n      unit: \"\",\n      subject: \"suuren kokonaisluvun\"\n    },\n    int: {\n      unit: \"\",\n      subject: \"kokonaisluvun\"\n    },\n    date: {\n      unit: \"\",\n      subject: \"päivämäärän\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"säännöllinen lauseke\",\n    email: \"sähköpostiosoite\",\n    url: \"URL-osoite\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO-aikaleima\",\n    date: \"ISO-päivämäärä\",\n    time: \"ISO-aika\",\n    duration: \"ISO-kesto\",\n    ipv4: \"IPv4-osoite\",\n    ipv6: \"IPv6-osoite\",\n    cidrv4: \"IPv4-alue\",\n    cidrv6: \"IPv6-alue\",\n    base64: \"base64-koodattu merkkijono\",\n    base64url: \"base64url-koodattu merkkijono\",\n    json_string: \"JSON-merkkijono\",\n    e164: \"E.164-luku\",\n    jwt: \"JWT\",\n    template_literal: \"templaattimerkkijono\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Virheellinen tyyppi: odotettiin ${issue.expected}, oli ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Virheellinen syöte: täytyy olla ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Virheellinen valinta: täytyy olla yksi seuraavista: ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Liian suuri: ${sizing.subject} täytyy olla ${adj}${issue.maximum.toString()} ${sizing.unit}`.trim();\n          }\n          return `Liian suuri: arvon täytyy olla ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Liian pieni: ${sizing.subject} täytyy olla ${adj}${issue.minimum.toString()} ${sizing.unit}`.trim();\n          }\n          return `Liian pieni: arvon täytyy olla ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `Virheellinen syöte: täytyy alkaa \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `Virheellinen syöte: täytyy loppua \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Virheellinen syöte: täytyy sisältää \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") {\n            return `Virheellinen syöte: täytyy vastata säännöllistä lauseketta ${_issue.pattern}`;\n          }\n          return `Virheellinen ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Virheellinen luku: täytyy olla luvun ${issue.divisor} monikerta`;\n      case \"unrecognized_keys\":\n        return `${issue.keys.length > 1 ? \"Tuntemattomat avaimet\" : \"Tuntematon avain\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return \"Virheellinen avain tietueessa\";\n      case \"invalid_union\":\n        return \"Virheellinen unioni\";\n      case \"invalid_element\":\n        return \"Virheellinen arvo joukossa\";\n      default:\n        return `Virheellinen syöte`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
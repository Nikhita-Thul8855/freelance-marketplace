{"ast":null,"code":"import * as util from \"../core/util.js\";\nexport const parsedType = data => {\n  const t = typeof data;\n  switch (t) {\n    case \"number\":\n      {\n        return Number.isNaN(data) ? \"NaN\" : \"number\";\n      }\n    case \"object\":\n      {\n        if (Array.isArray(data)) {\n          return \"array\";\n        }\n        if (data === null) {\n          return \"null\";\n        }\n        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n          return data.constructor.name;\n        }\n      }\n  }\n  return t;\n};\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"karakter\",\n      verb: \"olmalı\"\n    },\n    file: {\n      unit: \"bayt\",\n      verb: \"olmalı\"\n    },\n    array: {\n      unit: \"öğe\",\n      verb: \"olmalı\"\n    },\n    set: {\n      unit: \"öğe\",\n      verb: \"olmalı\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const Nouns = {\n    regex: \"girdi\",\n    email: \"e-posta adresi\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO tarih ve saat\",\n    date: \"ISO tarih\",\n    time: \"ISO saat\",\n    duration: \"ISO süre\",\n    ipv4: \"IPv4 adresi\",\n    ipv6: \"IPv6 adresi\",\n    cidrv4: \"IPv4 aralığı\",\n    cidrv6: \"IPv6 aralığı\",\n    base64: \"base64 ile şifrelenmiş metin\",\n    base64url: \"base64url ile şifrelenmiş metin\",\n    json_string: \"JSON dizesi\",\n    e164: \"E.164 sayısı\",\n    jwt: \"JWT\",\n    template_literal: \"Şablon dizesi\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Ge\\xE7ersiz de\\u011Fer: beklenen \".concat(issue.expected, \", al\\u0131nan \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Ge\\xE7ersiz de\\u011Fer: beklenen \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Ge\\xE7ersiz se\\xE7enek: a\\u015Fa\\u011F\\u0131dakilerden biri olmal\\u0131: \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\xC7ok b\\xFCy\\xFCk: beklenen \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"değer\", \" \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"öğe\");\n          return \"\\xC7ok b\\xFCy\\xFCk: beklenen \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"değer\", \" \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\xC7ok k\\xFC\\xE7\\xFCk: beklenen \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          return \"\\xC7ok k\\xFC\\xE7\\xFCk: beklenen \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"Ge\\xE7ersiz metin: \\\"\".concat(_issue.prefix, \"\\\" ile ba\\u015Flamal\\u0131\");\n          if (_issue.format === \"ends_with\") return \"Ge\\xE7ersiz metin: \\\"\".concat(_issue.suffix, \"\\\" ile bitmeli\");\n          if (_issue.format === \"includes\") return \"Ge\\xE7ersiz metin: \\\"\".concat(_issue.includes, \"\\\" i\\xE7ermeli\");\n          if (_issue.format === \"regex\") return \"Ge\\xE7ersiz metin: \".concat(_issue.pattern, \" desenine uymal\\u0131\");\n          return \"Ge\\xE7ersiz \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"Ge\\xE7ersiz say\\u0131: \".concat(issue.divisor, \" ile tam b\\xF6l\\xFCnebilmeli\");\n      case \"unrecognized_keys\":\n        return \"Tan\\u0131nmayan anahtar\".concat(issue.keys.length > 1 ? \"lar\" : \"\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \" i\\xE7inde ge\\xE7ersiz anahtar\");\n      case \"invalid_union\":\n        return \"Geçersiz değer\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \" i\\xE7inde ge\\xE7ersiz de\\u011Fer\");\n      default:\n        return \"Ge\\xE7ersiz de\\u011Fer\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
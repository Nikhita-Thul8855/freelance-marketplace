{"ast":null,"code":"import _objectSpread from\"C:/Users/PC/freelance-marketplace/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import axios from'axios';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:localStorage.getItem('token'),isAuthenticated:false,loading:true,error:null};// Action types\nconst actionTypes={USER_LOADED:'USER_LOADED',REGISTER_SUCCESS:'REGISTER_SUCCESS',LOGIN_SUCCESS:'LOGIN_SUCCESS',AUTH_ERROR:'AUTH_ERROR',LOGOUT:'LOGOUT',CLEAR_ERRORS:'CLEAR_ERRORS',SET_LOADING:'SET_LOADING'};// Reducer\nconst authReducer=(state,action)=>{switch(action.type){case actionTypes.USER_LOADED:return _objectSpread(_objectSpread({},state),{},{isAuthenticated:true,loading:false,user:action.payload});case actionTypes.REGISTER_SUCCESS:case actionTypes.LOGIN_SUCCESS:localStorage.setItem('token',action.payload.token);return _objectSpread(_objectSpread({},state),{},{token:action.payload.token,user:action.payload.user,isAuthenticated:true,loading:false,error:null});case actionTypes.AUTH_ERROR:case actionTypes.LOGOUT:localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{token:null,user:null,isAuthenticated:false,loading:false,error:action.payload});case actionTypes.CLEAR_ERRORS:return _objectSpread(_objectSpread({},state),{},{error:null});case actionTypes.SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:action.payload});default:return state;}};// Create context\nconst AuthContext=/*#__PURE__*/createContext();// Set up axios defaults\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';axios.defaults.baseURL=API_URL;// Helper function to set auth token\nconst setAuthToken=token=>{if(token){axios.defaults.headers.common['Authorization']=\"Bearer \".concat(token);}else{delete axios.defaults.headers.common['Authorization'];}};// Add token to headers if it exists\nif(localStorage.getItem('token')){setAuthToken(localStorage.getItem('token'));}// Auth Provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// Load user\nconst loadUser=async()=>{if(localStorage.getItem('token')){setAuthToken(localStorage.getItem('token'));}try{const res=await axios.get('/auth/me');dispatch({type:actionTypes.USER_LOADED,payload:res.data.user});}catch(error){var _error$response,_error$response$data;dispatch({type:actionTypes.AUTH_ERROR,payload:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Authentication failed'});}};// Register user\nconst register=async formData=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{const res=await axios.post('/auth/register',formData);// Store token in localStorage and set auth header\nlocalStorage.setItem('token',res.data.token);setAuthToken(res.data.token);dispatch({type:actionTypes.REGISTER_SUCCESS,payload:res.data});// Load user data\nloadUser();return{success:true};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed';dispatch({type:actionTypes.AUTH_ERROR,payload:errorMessage});return{success:false,error:errorMessage};}};// Login user\nconst login=async formData=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{const res=await axios.post('/auth/login',formData);// Store token in localStorage and set auth header\nlocalStorage.setItem('token',res.data.token);setAuthToken(res.data.token);dispatch({type:actionTypes.LOGIN_SUCCESS,payload:res.data});// Load user data\nloadUser();return{success:true};}catch(error){var _error$response3,_error$response3$data;const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Login failed';dispatch({type:actionTypes.AUTH_ERROR,payload:errorMessage});return{success:false,error:errorMessage};}};// Logout\nconst logout=()=>{dispatch({type:actionTypes.LOGOUT});setAuthToken(null);};// Clear errors\nconst clearErrors=()=>{dispatch({type:actionTypes.CLEAR_ERRORS});};// Load user on mount\nuseEffect(()=>{loadUser();},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:_objectSpread(_objectSpread({},state),{},{register,login,logout,clearErrors,loadUser}),children:children});};// Custom hook to use auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
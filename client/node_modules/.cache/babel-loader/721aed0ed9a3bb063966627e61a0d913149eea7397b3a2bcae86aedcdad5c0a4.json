{"ast":null,"code":"import { z } from 'zod';\n\n// Register schema\nexport const registerSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name cannot exceed 50 characters').trim(),\n  email: z.string().email('Please enter a valid email address').toLowerCase(),\n  password: z.string().min(6, 'Password must be at least 6 characters').max(128, 'Password cannot exceed 128 characters'),\n  confirmPassword: z.string(),\n  role: z.enum(['client', 'freelancer'], {\n    required_error: 'Please select a role'\n  })\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(1, 'Password is required')\n});\n\n// Profile update schema\nexport const profileSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name cannot exceed 50 characters').trim(),\n  bio: z.string().max(500, 'Bio cannot exceed 500 characters').optional(),\n  skills: z.array(z.string()).optional(),\n  hourlyRate: z.number().min(0, 'Hourly rate cannot be negative').optional(),\n  location: z.string().max(100, 'Location cannot exceed 100 characters').optional(),\n  phone: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number').optional(),\n  portfolio: z.string().url('Please enter a valid URL').optional().or(z.literal(''))\n});","map":{"version":3,"names":["z","registerSchema","object","name","string","min","max","trim","email","toLowerCase","password","confirmPassword","role","enum","required_error","refine","data","message","path","loginSchema","profileSchema","bio","optional","skills","array","hourlyRate","number","location","phone","regex","portfolio","url","or","literal"],"sources":["C:/Users/PC/freelance-marketplace/client/src/utils/validationSchemas.js"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// Register schema\r\nexport const registerSchema = z.object({\r\n  name: z.string()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(50, 'Name cannot exceed 50 characters')\r\n    .trim(),\r\n  email: z.string()\r\n    .email('Please enter a valid email address')\r\n    .toLowerCase(),\r\n  password: z.string()\r\n    .min(6, 'Password must be at least 6 characters')\r\n    .max(128, 'Password cannot exceed 128 characters'),\r\n  confirmPassword: z.string(),\r\n  role: z.enum(['client', 'freelancer'], {\r\n    required_error: 'Please select a role'\r\n  })\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: \"Passwords don't match\",\r\n  path: [\"confirmPassword\"]\r\n});\r\n\r\n// Login schema\r\nexport const loginSchema = z.object({\r\n  email: z.string()\r\n    .email('Please enter a valid email address'),\r\n  password: z.string()\r\n    .min(1, 'Password is required')\r\n});\r\n\r\n// Profile update schema\r\nexport const profileSchema = z.object({\r\n  name: z.string()\r\n    .min(2, 'Name must be at least 2 characters')\r\n    .max(50, 'Name cannot exceed 50 characters')\r\n    .trim(),\r\n  bio: z.string()\r\n    .max(500, 'Bio cannot exceed 500 characters')\r\n    .optional(),\r\n  skills: z.array(z.string())\r\n    .optional(),\r\n  hourlyRate: z.number()\r\n    .min(0, 'Hourly rate cannot be negative')\r\n    .optional(),\r\n  location: z.string()\r\n    .max(100, 'Location cannot exceed 100 characters')\r\n    .optional(),\r\n  phone: z.string()\r\n    .regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number')\r\n    .optional(),\r\n  portfolio: z.string()\r\n    .url('Please enter a valid URL')\r\n    .optional()\r\n    .or(z.literal(''))\r\n});\r\n"],"mappings":"AAAA,SAASA,CAAC,QAAQ,KAAK;;AAEvB;AACA,OAAO,MAAMC,cAAc,GAAGD,CAAC,CAACE,MAAM,CAAC;EACrCC,IAAI,EAAEH,CAAC,CAACI,MAAM,CAAC,CAAC,CACbC,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC,CAC5CC,GAAG,CAAC,EAAE,EAAE,kCAAkC,CAAC,CAC3CC,IAAI,CAAC,CAAC;EACTC,KAAK,EAAER,CAAC,CAACI,MAAM,CAAC,CAAC,CACdI,KAAK,CAAC,oCAAoC,CAAC,CAC3CC,WAAW,CAAC,CAAC;EAChBC,QAAQ,EAAEV,CAAC,CAACI,MAAM,CAAC,CAAC,CACjBC,GAAG,CAAC,CAAC,EAAE,wCAAwC,CAAC,CAChDC,GAAG,CAAC,GAAG,EAAE,uCAAuC,CAAC;EACpDK,eAAe,EAAEX,CAAC,CAACI,MAAM,CAAC,CAAC;EAC3BQ,IAAI,EAAEZ,CAAC,CAACa,IAAI,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE;IACrCC,cAAc,EAAE;EAClB,CAAC;AACH,CAAC,CAAC,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,QAAQ,KAAKM,IAAI,CAACL,eAAe,EAAE;EAC1DM,OAAO,EAAE,uBAAuB;EAChCC,IAAI,EAAE,CAAC,iBAAiB;AAC1B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAAGnB,CAAC,CAACE,MAAM,CAAC;EAClCM,KAAK,EAAER,CAAC,CAACI,MAAM,CAAC,CAAC,CACdI,KAAK,CAAC,oCAAoC,CAAC;EAC9CE,QAAQ,EAAEV,CAAC,CAACI,MAAM,CAAC,CAAC,CACjBC,GAAG,CAAC,CAAC,EAAE,sBAAsB;AAClC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMe,aAAa,GAAGpB,CAAC,CAACE,MAAM,CAAC;EACpCC,IAAI,EAAEH,CAAC,CAACI,MAAM,CAAC,CAAC,CACbC,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC,CAC5CC,GAAG,CAAC,EAAE,EAAE,kCAAkC,CAAC,CAC3CC,IAAI,CAAC,CAAC;EACTc,GAAG,EAAErB,CAAC,CAACI,MAAM,CAAC,CAAC,CACZE,GAAG,CAAC,GAAG,EAAE,kCAAkC,CAAC,CAC5CgB,QAAQ,CAAC,CAAC;EACbC,MAAM,EAAEvB,CAAC,CAACwB,KAAK,CAACxB,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CACxBkB,QAAQ,CAAC,CAAC;EACbG,UAAU,EAAEzB,CAAC,CAAC0B,MAAM,CAAC,CAAC,CACnBrB,GAAG,CAAC,CAAC,EAAE,gCAAgC,CAAC,CACxCiB,QAAQ,CAAC,CAAC;EACbK,QAAQ,EAAE3B,CAAC,CAACI,MAAM,CAAC,CAAC,CACjBE,GAAG,CAAC,GAAG,EAAE,uCAAuC,CAAC,CACjDgB,QAAQ,CAAC,CAAC;EACbM,KAAK,EAAE5B,CAAC,CAACI,MAAM,CAAC,CAAC,CACdyB,KAAK,CAAC,oBAAoB,EAAE,mCAAmC,CAAC,CAChEP,QAAQ,CAAC,CAAC;EACbQ,SAAS,EAAE9B,CAAC,CAACI,MAAM,CAAC,CAAC,CAClB2B,GAAG,CAAC,0BAA0B,CAAC,CAC/BT,QAAQ,CAAC,CAAC,CACVU,EAAE,CAAChC,CAAC,CAACiC,OAAO,CAAC,EAAE,CAAC;AACrB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
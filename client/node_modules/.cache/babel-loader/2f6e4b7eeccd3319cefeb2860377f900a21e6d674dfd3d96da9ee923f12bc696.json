{"ast":null,"code":"import api from './api';\nclass GigService {\n  // Get freelancer's own gigs\n  async getMyGigs(params = {}) {\n    try {\n      const response = await api.get('/api/gigs/my-gigs', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching my gigs:', error);\n      throw error;\n    }\n  }\n\n  // Get gig analytics for freelancer\n  async getGigAnalytics(gigId) {\n    try {\n      const response = await api.get(`/api/gigs/${gigId}/analytics`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching gig analytics:', error);\n      throw error;\n    }\n  }\n\n  // Get earnings summary for freelancer\n  async getEarnings(params = {}) {\n    try {\n      const response = await api.get('/api/gigs/earnings', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching earnings:', error);\n      throw error;\n    }\n  }\n\n  // Get earnings statistics\n  async getEarningsStats() {\n    try {\n      const response = await api.get('/api/gigs/earnings/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching earnings stats:', error);\n      throw error;\n    }\n  }\n\n  // Update gig status (pause/activate)\n  async updateGigStatus(gigId, status) {\n    try {\n      const response = await api.patch(`/api/gigs/${gigId}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating gig status:', error);\n      throw error;\n    }\n  }\n\n  // Get gig performance metrics\n  async getGigPerformance(gigId) {\n    try {\n      const response = await api.get(`/api/gigs/${gigId}/performance`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching gig performance:', error);\n      throw error;\n    }\n  }\n\n  // Delete gig\n  async deleteGig(gigId) {\n    try {\n      const response = await api.delete(`/api/gigs/${gigId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting gig:', error);\n      throw error;\n    }\n  }\n\n  // Get gig orders for freelancer\n  async getGigOrders(gigId, params = {}) {\n    try {\n      const response = await api.get(`/api/gigs/${gigId}/orders`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching gig orders:', error);\n      throw error;\n    }\n  }\n\n  // Format currency\n  formatPrice(price) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(price);\n  }\n\n  // Get status color for UI\n  getStatusColor(status) {\n    const statusColors = {\n      active: 'bg-green-100 text-green-800',\n      paused: 'bg-yellow-100 text-yellow-800',\n      inactive: 'bg-gray-100 text-gray-800',\n      pending: 'bg-blue-100 text-blue-800'\n    };\n    return statusColors[status] || 'bg-gray-100 text-gray-800';\n  }\n\n  // Get status text for display\n  getStatusText(status) {\n    const statusTexts = {\n      active: 'Active',\n      paused: 'Paused',\n      inactive: 'Inactive',\n      pending: 'Pending Approval'\n    };\n    return statusTexts[status] || status;\n  }\n}\nexport default new GigService();","map":{"version":3,"names":["api","GigService","getMyGigs","params","response","get","data","error","console","getGigAnalytics","gigId","getEarnings","getEarningsStats","updateGigStatus","status","patch","getGigPerformance","deleteGig","delete","getGigOrders","formatPrice","price","Intl","NumberFormat","style","currency","format","getStatusColor","statusColors","active","paused","inactive","pending","getStatusText","statusTexts"],"sources":["C:/Users/PC/freelance-marketplace/client/src/services/gigService.js"],"sourcesContent":["import api from './api';\r\n\r\nclass GigService {\r\n  // Get freelancer's own gigs\r\n  async getMyGigs(params = {}) {\r\n    try {\r\n      const response = await api.get('/api/gigs/my-gigs', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching my gigs:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get gig analytics for freelancer\r\n  async getGigAnalytics(gigId) {\r\n    try {\r\n      const response = await api.get(`/api/gigs/${gigId}/analytics`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching gig analytics:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get earnings summary for freelancer\r\n  async getEarnings(params = {}) {\r\n    try {\r\n      const response = await api.get('/api/gigs/earnings', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching earnings:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get earnings statistics\r\n  async getEarningsStats() {\r\n    try {\r\n      const response = await api.get('/api/gigs/earnings/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching earnings stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update gig status (pause/activate)\r\n  async updateGigStatus(gigId, status) {\r\n    try {\r\n      const response = await api.patch(`/api/gigs/${gigId}/status`, { status });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating gig status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get gig performance metrics\r\n  async getGigPerformance(gigId) {\r\n    try {\r\n      const response = await api.get(`/api/gigs/${gigId}/performance`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching gig performance:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete gig\r\n  async deleteGig(gigId) {\r\n    try {\r\n      const response = await api.delete(`/api/gigs/${gigId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting gig:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get gig orders for freelancer\r\n  async getGigOrders(gigId, params = {}) {\r\n    try {\r\n      const response = await api.get(`/api/gigs/${gigId}/orders`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching gig orders:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Format currency\r\n  formatPrice(price) {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD'\r\n    }).format(price);\r\n  }\r\n\r\n  // Get status color for UI\r\n  getStatusColor(status) {\r\n    const statusColors = {\r\n      active: 'bg-green-100 text-green-800',\r\n      paused: 'bg-yellow-100 text-yellow-800',\r\n      inactive: 'bg-gray-100 text-gray-800',\r\n      pending: 'bg-blue-100 text-blue-800'\r\n    };\r\n    return statusColors[status] || 'bg-gray-100 text-gray-800';\r\n  }\r\n\r\n  // Get status text for display\r\n  getStatusText(status) {\r\n    const statusTexts = {\r\n      active: 'Active',\r\n      paused: 'Paused',\r\n      inactive: 'Inactive',\r\n      pending: 'Pending Approval'\r\n    };\r\n    return statusTexts[status] || status;\r\n  }\r\n}\r\n\r\nexport default new GigService();\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,SAASA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,mBAAmB,EAAE;QAAEF;MAAO,CAAC,CAAC;MAC/D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,eAAeA,CAACC,KAAK,EAAE;IAC3B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,aAAaK,KAAK,YAAY,CAAC;MAC9D,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMI,WAAWA,CAACR,MAAM,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,oBAAoB,EAAE;QAAEF;MAAO,CAAC,CAAC;MAChE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMK,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,0BAA0B,CAAC;MAC1D,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMM,eAAeA,CAACH,KAAK,EAAEI,MAAM,EAAE;IACnC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,KAAK,CAAC,aAAaL,KAAK,SAAS,EAAE;QAAEI;MAAO,CAAC,CAAC;MACzE,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMS,iBAAiBA,CAACN,KAAK,EAAE;IAC7B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,aAAaK,KAAK,cAAc,CAAC;MAChE,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMU,SAASA,CAACP,KAAK,EAAE;IACrB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,MAAM,CAAC,aAAaR,KAAK,EAAE,CAAC;MACvD,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMY,YAAYA,CAACT,KAAK,EAAEP,MAAM,GAAG,CAAC,CAAC,EAAE;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,aAAaK,KAAK,SAAS,EAAE;QAAEP;MAAO,CAAC,CAAC;MACvE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACAa,WAAWA,CAACC,KAAK,EAAE;IACjB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MACpCC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;EAClB;;EAEA;EACAM,cAAcA,CAACb,MAAM,EAAE;IACrB,MAAMc,YAAY,GAAG;MACnBC,MAAM,EAAE,6BAA6B;MACrCC,MAAM,EAAE,+BAA+B;MACvCC,QAAQ,EAAE,2BAA2B;MACrCC,OAAO,EAAE;IACX,CAAC;IACD,OAAOJ,YAAY,CAACd,MAAM,CAAC,IAAI,2BAA2B;EAC5D;;EAEA;EACAmB,aAAaA,CAACnB,MAAM,EAAE;IACpB,MAAMoB,WAAW,GAAG;MAClBL,MAAM,EAAE,QAAQ;MAChBC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE,UAAU;MACpBC,OAAO,EAAE;IACX,CAAC;IACD,OAAOE,WAAW,CAACpB,MAAM,CAAC,IAAIA,MAAM;EACtC;AACF;AAEA,eAAe,IAAIb,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from './api';\nclass PaymentService {\n  /**\r\n   * Create Stripe checkout session\r\n   */\n  static async createCheckoutSession(gigId, requirements = '') {\n    try {\n      const response = await api.post('/payments/create-checkout-session', {\n        gigId,\n        requirements\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create checkout session');\n    }\n  }\n\n  /**\r\n   * Handle successful payment\r\n   */\n  static async handlePaymentSuccess(sessionId) {\n    try {\n      const response = await api.get(`/payments/success?session_id=${sessionId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to process payment success');\n    }\n  }\n\n  /**\r\n   * Get user orders\r\n   */\n  static async getOrders(params = {}) {\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      const response = await api.get(`/payments/orders?${queryParams}`);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch orders');\n    }\n  }\n\n  /**\r\n   * Get specific order\r\n   */\n  static async getOrder(orderId) {\n    try {\n      const response = await api.get(`/payments/orders/${orderId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch order');\n    }\n  }\n\n  /**\r\n   * Request refund\r\n   */\n  static async requestRefund(orderId, reason = '') {\n    try {\n      const response = await api.post(`/payments/refund/${orderId}`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to process refund');\n    }\n  }\n}\nexport default PaymentService;","map":{"version":3,"names":["api","PaymentService","createCheckoutSession","gigId","requirements","response","post","data","error","_error$response","_error$response$data","Error","message","handlePaymentSuccess","sessionId","get","_error$response2","_error$response2$data","getOrders","params","queryParams","URLSearchParams","toString","_error$response3","_error$response3$data","getOrder","orderId","_error$response4","_error$response4$data","requestRefund","reason","_error$response5","_error$response5$data"],"sources":["C:/Users/PC/freelance-marketplace/client/src/services/paymentService.js"],"sourcesContent":["import api from './api';\r\n\r\nclass PaymentService {\r\n  /**\r\n   * Create Stripe checkout session\r\n   */\r\n  static async createCheckoutSession(gigId, requirements = '') {\r\n    try {\r\n      const response = await api.post('/payments/create-checkout-session', {\r\n        gigId,\r\n        requirements\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to create checkout session');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle successful payment\r\n   */\r\n  static async handlePaymentSuccess(sessionId) {\r\n    try {\r\n      const response = await api.get(`/payments/success?session_id=${sessionId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to process payment success');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user orders\r\n   */\r\n  static async getOrders(params = {}) {\r\n    try {\r\n      const queryParams = new URLSearchParams(params).toString();\r\n      const response = await api.get(`/payments/orders?${queryParams}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch orders');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific order\r\n   */\r\n  static async getOrder(orderId) {\r\n    try {\r\n      const response = await api.get(`/payments/orders/${orderId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to fetch order');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request refund\r\n   */\r\n  static async requestRefund(orderId, reason = '') {\r\n    try {\r\n      const response = await api.post(`/payments/refund/${orderId}`, {\r\n        reason\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to process refund');\r\n    }\r\n  }\r\n}\r\n\r\nexport default PaymentService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as core from \"./core.js\";\nimport * as errors from \"./errors.js\";\nimport * as util from \"./util.js\";\nexport const _parse = _Err => (schema, value, _ctx, _params) => {\n  const ctx = _ctx ? Object.assign(_ctx, {\n    async: false\n  }) : {\n    async: false\n  };\n  const result = schema._zod.run({\n    value,\n    issues: []\n  }, ctx);\n  if (result instanceof Promise) {\n    throw new core.$ZodAsyncError();\n  }\n  if (result.issues.length) {\n    const e = new (_params?.Err ?? _Err)(result.issues.map(iss => util.finalizeIssue(iss, ctx, core.config())));\n    util.captureStackTrace(e, _params?.callee);\n    throw e;\n  }\n  return result.value;\n};\nexport const parse = /* @__PURE__*/_parse(errors.$ZodRealError);\nexport const _parseAsync = _Err => async (schema, value, _ctx, params) => {\n  const ctx = _ctx ? Object.assign(_ctx, {\n    async: true\n  }) : {\n    async: true\n  };\n  let result = schema._zod.run({\n    value,\n    issues: []\n  }, ctx);\n  if (result instanceof Promise) result = await result;\n  if (result.issues.length) {\n    const e = new (params?.Err ?? _Err)(result.issues.map(iss => util.finalizeIssue(iss, ctx, core.config())));\n    util.captureStackTrace(e, params?.callee);\n    throw e;\n  }\n  return result.value;\n};\nexport const parseAsync = /* @__PURE__*/_parseAsync(errors.$ZodRealError);\nexport const _safeParse = _Err => (schema, value, _ctx) => {\n  const ctx = _ctx ? {\n    ..._ctx,\n    async: false\n  } : {\n    async: false\n  };\n  const result = schema._zod.run({\n    value,\n    issues: []\n  }, ctx);\n  if (result instanceof Promise) {\n    throw new core.$ZodAsyncError();\n  }\n  return result.issues.length ? {\n    success: false,\n    error: new (_Err ?? errors.$ZodError)(result.issues.map(iss => util.finalizeIssue(iss, ctx, core.config())))\n  } : {\n    success: true,\n    data: result.value\n  };\n};\nexport const safeParse = /* @__PURE__*/_safeParse(errors.$ZodRealError);\nexport const _safeParseAsync = _Err => async (schema, value, _ctx) => {\n  const ctx = _ctx ? Object.assign(_ctx, {\n    async: true\n  }) : {\n    async: true\n  };\n  let result = schema._zod.run({\n    value,\n    issues: []\n  }, ctx);\n  if (result instanceof Promise) result = await result;\n  return result.issues.length ? {\n    success: false,\n    error: new _Err(result.issues.map(iss => util.finalizeIssue(iss, ctx, core.config())))\n  } : {\n    success: true,\n    data: result.value\n  };\n};\nexport const safeParseAsync = /* @__PURE__*/_safeParseAsync(errors.$ZodRealError);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
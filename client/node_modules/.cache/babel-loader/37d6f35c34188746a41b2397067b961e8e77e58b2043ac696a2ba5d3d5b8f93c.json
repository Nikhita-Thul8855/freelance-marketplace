{"ast":null,"code":"import api from './api';\nimport socketService from './socketService';\nclass MessageService {\n  // Send a message\n  async sendMessage(receiverId, content, type = 'text', relatedOrder = null, relatedGig = null) {\n    try {\n      console.log('üöÄ Sending message...');\n      console.log('Receiver ID:', receiverId);\n      console.log('Content:', content);\n      console.log('Type:', type);\n\n      // Try socket first if connected\n      if (socketService.isConnected()) {\n        console.log('üì° Sending via Socket.io...');\n        try {\n          await socketService.sendMessage(receiverId, content, type);\n          console.log('‚úÖ Message sent via Socket.io');\n          return {\n            success: true,\n            data: {\n              content,\n              receiverId,\n              type,\n              timestamp: new Date(),\n              via: 'socket'\n            }\n          };\n        } catch (socketError) {\n          console.log('‚ö†Ô∏è Socket send failed, falling back to HTTP...');\n        }\n      }\n\n      // Fallback to HTTP API\n      console.log('üì° Sending via HTTP API...');\n      const response = await api.post('/messages', {\n        receiverId,\n        content,\n        type,\n        relatedOrder,\n        relatedGig\n      });\n      console.log('‚úÖ Message sent successfully via HTTP:', response.data);\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response4, _error$response4$data, _error$response5, _error$response6;\n      console.error('‚ùå Message send failed:');\n      console.error('Error:', error);\n      console.error('Response:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      console.error('Status:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n      console.error('Headers:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.headers);\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to send message',\n        details: {\n          status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n          data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data\n        }\n      };\n    }\n  }\n\n  // Get conversation messages\n  async getConversationMessages(userId, page = 1, limit = 20) {\n    try {\n      const response = await api.get(`/messages/conversation/${userId}?page=${page}&limit=${limit}`);\n      return {\n        success: true,\n        data: response.data.data,\n        pagination: response.data.pagination\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch messages'\n      };\n    }\n  }\n\n  // Get all conversations\n  async getConversations() {\n    try {\n      const response = await api.get('/messages/conversations');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      return {\n        success: false,\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to fetch conversations'\n      };\n    }\n  }\n\n  // Mark message as read\n  async markAsRead(messageId) {\n    try {\n      const response = await api.put(`/messages/${messageId}/read`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      return {\n        success: false,\n        error: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to mark message as read'\n      };\n    }\n  }\n\n  // Delete message\n  async deleteMessage(messageId) {\n    try {\n      const response = await api.delete(`/messages/${messageId}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      return {\n        success: false,\n        error: ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to delete message'\n      };\n    }\n  }\n\n  // Format message time\n  formatMessageTime(dateString) {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    if (diffDays === 0) {\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return date.toLocaleDateString([], {\n        weekday: 'short'\n      });\n    } else {\n      return date.toLocaleDateString([], {\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  }\n}\nconst messageService = new MessageService();\nexport default messageService;","map":{"version":3,"names":["api","socketService","MessageService","sendMessage","receiverId","content","type","relatedOrder","relatedGig","console","log","isConnected","success","data","timestamp","Date","via","socketError","response","post","error","_error$response","_error$response2","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response6","status","headers","message","details","getConversationMessages","userId","page","limit","get","pagination","_error$response7","_error$response7$data","getConversations","_error$response8","_error$response8$data","markAsRead","messageId","put","_error$response9","_error$response9$data","deleteMessage","delete","_error$response0","_error$response0$data","formatMessageTime","dateString","date","now","diffTime","Math","abs","diffDays","floor","toLocaleTimeString","hour","minute","toLocaleDateString","weekday","month","day","messageService"],"sources":["C:/Users/PC/freelance-marketplace/client/src/services/messageService.js"],"sourcesContent":["import api from './api';\r\nimport socketService from './socketService';\r\n\r\nclass MessageService {\r\n  // Send a message\r\n  async sendMessage(receiverId, content, type = 'text', relatedOrder = null, relatedGig = null) {\r\n    try {\r\n      console.log('üöÄ Sending message...');\r\n      console.log('Receiver ID:', receiverId);\r\n      console.log('Content:', content);\r\n      console.log('Type:', type);\r\n\r\n      // Try socket first if connected\r\n      if (socketService.isConnected()) {\r\n        console.log('üì° Sending via Socket.io...');\r\n        try {\r\n          await socketService.sendMessage(receiverId, content, type);\r\n          console.log('‚úÖ Message sent via Socket.io');\r\n          return {\r\n            success: true,\r\n            data: {\r\n              content,\r\n              receiverId,\r\n              type,\r\n              timestamp: new Date(),\r\n              via: 'socket'\r\n            }\r\n          };\r\n        } catch (socketError) {\r\n          console.log('‚ö†Ô∏è Socket send failed, falling back to HTTP...');\r\n        }\r\n      }\r\n\r\n      // Fallback to HTTP API\r\n      console.log('üì° Sending via HTTP API...');\r\n      const response = await api.post('/messages', {\r\n        receiverId,\r\n        content,\r\n        type,\r\n        relatedOrder,\r\n        relatedGig\r\n      });\r\n      \r\n      console.log('‚úÖ Message sent successfully via HTTP:', response.data);\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Message send failed:');\r\n      console.error('Error:', error);\r\n      console.error('Response:', error.response?.data);\r\n      console.error('Status:', error.response?.status);\r\n      console.error('Headers:', error.response?.headers);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to send message',\r\n        details: {\r\n          status: error.response?.status,\r\n          data: error.response?.data\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get conversation messages\r\n  async getConversationMessages(userId, page = 1, limit = 20) {\r\n    try {\r\n      const response = await api.get(`/messages/conversation/${userId}?page=${page}&limit=${limit}`);\r\n      return {\r\n        success: true,\r\n        data: response.data.data,\r\n        pagination: response.data.pagination\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch messages'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get all conversations\r\n  async getConversations() {\r\n    try {\r\n      const response = await api.get('/messages/conversations');\r\n      return {\r\n        success: true,\r\n        data: response.data.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to fetch conversations'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Mark message as read\r\n  async markAsRead(messageId) {\r\n    try {\r\n      const response = await api.put(`/messages/${messageId}/read`);\r\n      return {\r\n        success: true,\r\n        data: response.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to mark message as read'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Delete message\r\n  async deleteMessage(messageId) {\r\n    try {\r\n      const response = await api.delete(`/messages/${messageId}`);\r\n      return {\r\n        success: true,\r\n        data: response.data\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.message || 'Failed to delete message'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Format message time\r\n  formatMessageTime(dateString) {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffTime = Math.abs(now - date);\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays === 0) {\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else if (diffDays === 1) {\r\n      return 'Yesterday';\r\n    } else if (diffDays < 7) {\r\n      return date.toLocaleDateString([], { weekday: 'short' });\r\n    } else {\r\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\r\n    }\r\n  }\r\n}\r\n\r\nconst messageService = new MessageService();\r\nexport default messageService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"문자\",\n      verb: \"to have\"\n    },\n    file: {\n      unit: \"바이트\",\n      verb: \"to have\"\n    },\n    array: {\n      unit: \"개\",\n      verb: \"to have\"\n    },\n    set: {\n      unit: \"개\",\n      verb: \"to have\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"입력\",\n    email: \"이메일 주소\",\n    url: \"URL\",\n    emoji: \"이모지\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO 날짜시간\",\n    date: \"ISO 날짜\",\n    time: \"ISO 시간\",\n    duration: \"ISO 기간\",\n    ipv4: \"IPv4 주소\",\n    ipv6: \"IPv6 주소\",\n    cidrv4: \"IPv4 범위\",\n    cidrv6: \"IPv6 범위\",\n    base64: \"base64 인코딩 문자열\",\n    base64url: \"base64url 인코딩 문자열\",\n    json_string: \"JSON 문자열\",\n    e164: \"E.164 번호\",\n    jwt: \"JWT\",\n    template_literal: \"입력\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `잘못된 입력: 예상 타입은 ${issue.expected}, 받은 타입은 ${parsedType(issue.input)}입니다`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `잘못된 입력: 값은 ${util.stringifyPrimitive(issue.values[0])} 이어야 합니다`;\n        return `잘못된 옵션: ${util.joinValues(issue.values, \"또는 \")} 중 하나여야 합니다`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"이하\" : \"미만\";\n          const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = sizing?.unit ?? \"요소\";\n          if (sizing) return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;\n          return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()} ${adj}${suffix}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"이상\" : \"초과\";\n          const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = sizing?.unit ?? \"요소\";\n          if (sizing) {\n            return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;\n          }\n          return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()} ${adj}${suffix}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return `잘못된 문자열: \"${_issue.prefix}\"(으)로 시작해야 합니다`;\n          }\n          if (_issue.format === \"ends_with\") return `잘못된 문자열: \"${_issue.suffix}\"(으)로 끝나야 합니다`;\n          if (_issue.format === \"includes\") return `잘못된 문자열: \"${_issue.includes}\"을(를) 포함해야 합니다`;\n          if (_issue.format === \"regex\") return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;\n          return `잘못된 ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `잘못된 숫자: ${issue.divisor}의 배수여야 합니다`;\n      case \"unrecognized_keys\":\n        return `인식할 수 없는 키: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `잘못된 키: ${issue.origin}`;\n      case \"invalid_union\":\n        return `잘못된 입력`;\n      case \"invalid_element\":\n        return `잘못된 값: ${issue.origin}`;\n      default:\n        return `잘못된 입력`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
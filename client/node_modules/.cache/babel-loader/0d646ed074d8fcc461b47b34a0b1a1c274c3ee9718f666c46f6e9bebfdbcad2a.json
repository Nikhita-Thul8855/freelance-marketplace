{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"文字\",\n      verb: \"である\"\n    },\n    file: {\n      unit: \"バイト\",\n      verb: \"である\"\n    },\n    array: {\n      unit: \"要素\",\n      verb: \"である\"\n    },\n    set: {\n      unit: \"要素\",\n      verb: \"である\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"数値\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"配列\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"入力値\",\n    email: \"メールアドレス\",\n    url: \"URL\",\n    emoji: \"絵文字\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO日時\",\n    date: \"ISO日付\",\n    time: \"ISO時刻\",\n    duration: \"ISO期間\",\n    ipv4: \"IPv4アドレス\",\n    ipv6: \"IPv6アドレス\",\n    cidrv4: \"IPv4範囲\",\n    cidrv6: \"IPv6範囲\",\n    base64: \"base64エンコード文字列\",\n    base64url: \"base64urlエンコード文字列\",\n    json_string: \"JSON文字列\",\n    e164: \"E.164番号\",\n    jwt: \"JWT\",\n    template_literal: \"入力値\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `無効な入力: ${issue.expected}が期待されましたが、${parsedType(issue.input)}が入力されました`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `無効な入力: ${util.stringifyPrimitive(issue.values[0])}が期待されました`;\n        return `無効な選択: ${util.joinValues(issue.values, \"、\")}のいずれかである必要があります`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"以下である\" : \"より小さい\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${sizing.unit ?? \"要素\"}${adj}必要があります`;\n          return `大きすぎる値: ${issue.origin ?? \"値\"}は${issue.maximum.toString()}${adj}必要があります`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"以上である\" : \"より大きい\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${sizing.unit}${adj}必要があります`;\n          return `小さすぎる値: ${issue.origin}は${issue.minimum.toString()}${adj}必要があります`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `無効な文字列: \"${_issue.prefix}\"で始まる必要があります`;\n          if (_issue.format === \"ends_with\") return `無効な文字列: \"${_issue.suffix}\"で終わる必要があります`;\n          if (_issue.format === \"includes\") return `無効な文字列: \"${_issue.includes}\"を含む必要があります`;\n          if (_issue.format === \"regex\") return `無効な文字列: パターン${_issue.pattern}に一致する必要があります`;\n          return `無効な${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `無効な数値: ${issue.divisor}の倍数である必要があります`;\n      case \"unrecognized_keys\":\n        return `認識されていないキー${issue.keys.length > 1 ? \"群\" : \"\"}: ${util.joinValues(issue.keys, \"、\")}`;\n      case \"invalid_key\":\n        return `${issue.origin}内の無効なキー`;\n      case \"invalid_union\":\n        return \"無効な入力\";\n      case \"invalid_element\":\n        return `${issue.origin}内の無効な値`;\n      default:\n        return `無効な入力`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
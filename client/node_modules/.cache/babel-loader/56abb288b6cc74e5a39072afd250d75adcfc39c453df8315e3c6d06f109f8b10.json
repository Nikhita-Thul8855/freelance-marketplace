{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"simvol\",\n      verb: \"olmalıdır\"\n    },\n    file: {\n      unit: \"bayt\",\n      verb: \"olmalıdır\"\n    },\n    array: {\n      unit: \"element\",\n      verb: \"olmalıdır\"\n    },\n    set: {\n      unit: \"element\",\n      verb: \"olmalıdır\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"input\",\n    email: \"email address\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO datetime\",\n    date: \"ISO date\",\n    time: \"ISO time\",\n    duration: \"ISO duration\",\n    ipv4: \"IPv4 address\",\n    ipv6: \"IPv6 address\",\n    cidrv4: \"IPv4 range\",\n    cidrv6: \"IPv6 range\",\n    base64: \"base64-encoded string\",\n    base64url: \"base64url-encoded string\",\n    json_string: \"JSON string\",\n    e164: \"E.164 number\",\n    jwt: \"JWT\",\n    template_literal: \"input\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Yanl\\u0131\\u015F d\\u0259y\\u0259r: g\\xF6zl\\u0259nil\\u0259n \".concat(issue.expected, \", daxil olan \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Yanl\\u0131\\u015F d\\u0259y\\u0259r: g\\xF6zl\\u0259nil\\u0259n \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Yanl\\u0131\\u015F se\\xE7im: a\\u015Fa\\u011F\\u0131dak\\u0131lardan biri olmal\\u0131d\\u0131r: \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\xC7ox b\\xF6y\\xFCk: g\\xF6zl\\u0259nil\\u0259n \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"dəyər\", \" \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"element\");\n          return \"\\xC7ox b\\xF6y\\xFCk: g\\xF6zl\\u0259nil\\u0259n \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"dəyər\", \" \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\xC7ox ki\\xE7ik: g\\xF6zl\\u0259nil\\u0259n \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          return \"\\xC7ox ki\\xE7ik: g\\xF6zl\\u0259nil\\u0259n \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"Yanl\\u0131\\u015F m\\u0259tn: \\\"\".concat(_issue.prefix, \"\\\" il\\u0259 ba\\u015Flamal\\u0131d\\u0131r\");\n          if (_issue.format === \"ends_with\") return \"Yanl\\u0131\\u015F m\\u0259tn: \\\"\".concat(_issue.suffix, \"\\\" il\\u0259 bitm\\u0259lidir\");\n          if (_issue.format === \"includes\") return \"Yanl\\u0131\\u015F m\\u0259tn: \\\"\".concat(_issue.includes, \"\\\" daxil olmal\\u0131d\\u0131r\");\n          if (_issue.format === \"regex\") return \"Yanl\\u0131\\u015F m\\u0259tn: \".concat(_issue.pattern, \" \\u015Fablonuna uy\\u011Fun olmal\\u0131d\\u0131r\");\n          return \"Yanl\\u0131\\u015F \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"Yanl\\u0131\\u015F \\u0259d\\u0259d: \".concat(issue.divisor, \" il\\u0259 b\\xF6l\\xFCn\\u0259 bil\\u0259n olmal\\u0131d\\u0131r\");\n      case \"unrecognized_keys\":\n        return \"Tan\\u0131nmayan a\\xE7ar\".concat(issue.keys.length > 1 ? \"lar\" : \"\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \" daxilind\\u0259 yanl\\u0131\\u015F a\\xE7ar\");\n      case \"invalid_union\":\n        return \"Yanlış dəyər\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \" daxilind\\u0259 yanl\\u0131\\u015F d\\u0259y\\u0259r\");\n      default:\n        return \"Yanl\\u0131\\u015F d\\u0259y\\u0259r\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
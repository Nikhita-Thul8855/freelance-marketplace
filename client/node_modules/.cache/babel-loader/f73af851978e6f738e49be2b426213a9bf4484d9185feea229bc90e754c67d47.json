{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"எழுத்துக்கள்\",\n      verb: \"கொண்டிருக்க வேண்டும்\"\n    },\n    file: {\n      unit: \"பைட்டுகள்\",\n      verb: \"கொண்டிருக்க வேண்டும்\"\n    },\n    array: {\n      unit: \"உறுப்புகள்\",\n      verb: \"கொண்டிருக்க வேண்டும்\"\n    },\n    set: {\n      unit: \"உறுப்புகள்\",\n      verb: \"கொண்டிருக்க வேண்டும்\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"எண் அல்லாதது\" : \"எண்\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"அணி\";\n          }\n          if (data === null) {\n            return \"வெறுமை\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"உள்ளீடு\",\n    email: \"மின்னஞ்சல் முகவரி\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO தேதி நேரம்\",\n    date: \"ISO தேதி\",\n    time: \"ISO நேரம்\",\n    duration: \"ISO கால அளவு\",\n    ipv4: \"IPv4 முகவரி\",\n    ipv6: \"IPv6 முகவரி\",\n    cidrv4: \"IPv4 வரம்பு\",\n    cidrv6: \"IPv6 வரம்பு\",\n    base64: \"base64-encoded சரம்\",\n    base64url: \"base64url-encoded சரம்\",\n    json_string: \"JSON சரம்\",\n    e164: \"E.164 எண்\",\n    jwt: \"JWT\",\n    template_literal: \"input\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${issue.expected}, பெறப்பட்டது ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `தவறான உள்ளீடு: எதிர்பார்க்கப்பட்டது ${util.stringifyPrimitive(issue.values[0])}`;\n        return `தவறான விருப்பம்: எதிர்பார்க்கப்பட்டது ${util.joinValues(issue.values, \"|\")} இல் ஒன்று`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"உறுப்புகள்\"} ஆக இருக்க வேண்டும்`;\n          }\n          return `மிக பெரியது: எதிர்பார்க்கப்பட்டது ${issue.origin ?? \"மதிப்பு\"} ${adj}${issue.maximum.toString()} ஆக இருக்க வேண்டும்`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit} ஆக இருக்க வேண்டும்`; //\n          }\n          return `மிகச் சிறியது: எதிர்பார்க்கப்பட்டது ${issue.origin} ${adj}${issue.minimum.toString()} ஆக இருக்க வேண்டும்`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `தவறான சரம்: \"${_issue.prefix}\" இல் தொடங்க வேண்டும்`;\n          if (_issue.format === \"ends_with\") return `தவறான சரம்: \"${_issue.suffix}\" இல் முடிவடைய வேண்டும்`;\n          if (_issue.format === \"includes\") return `தவறான சரம்: \"${_issue.includes}\" ஐ உள்ளடக்க வேண்டும்`;\n          if (_issue.format === \"regex\") return `தவறான சரம்: ${_issue.pattern} முறைபாட்டுடன் பொருந்த வேண்டும்`;\n          return `தவறான ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `தவறான எண்: ${issue.divisor} இன் பலமாக இருக்க வேண்டும்`;\n      case \"unrecognized_keys\":\n        return `அடையாளம் தெரியாத விசை${issue.keys.length > 1 ? \"கள்\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `${issue.origin} இல் தவறான விசை`;\n      case \"invalid_union\":\n        return \"தவறான உள்ளீடு\";\n      case \"invalid_element\":\n        return `${issue.origin} இல் தவறான மதிப்பு`;\n      default:\n        return `தவறான உள்ளீடு`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
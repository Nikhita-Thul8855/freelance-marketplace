{"ast":null,"code":"import * as util from \"../core/util.js\";\nexport const parsedType = data => {\n  const t = typeof data;\n  switch (t) {\n    case \"number\":\n      {\n        return Number.isNaN(data) ? \"NaN\" : \"nombro\";\n      }\n    case \"object\":\n      {\n        if (Array.isArray(data)) {\n          return \"tabelo\";\n        }\n        if (data === null) {\n          return \"senvalora\";\n        }\n        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n          return data.constructor.name;\n        }\n      }\n  }\n  return t;\n};\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"karaktrojn\",\n      verb: \"havi\"\n    },\n    file: {\n      unit: \"bajtojn\",\n      verb: \"havi\"\n    },\n    array: {\n      unit: \"elementojn\",\n      verb: \"havi\"\n    },\n    set: {\n      unit: \"elementojn\",\n      verb: \"havi\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const Nouns = {\n    regex: \"enigo\",\n    email: \"retadreso\",\n    url: \"URL\",\n    emoji: \"emoĝio\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO-datotempo\",\n    date: \"ISO-dato\",\n    time: \"ISO-tempo\",\n    duration: \"ISO-daŭro\",\n    ipv4: \"IPv4-adreso\",\n    ipv6: \"IPv6-adreso\",\n    cidrv4: \"IPv4-rango\",\n    cidrv6: \"IPv6-rango\",\n    base64: \"64-ume kodita karaktraro\",\n    base64url: \"URL-64-ume kodita karaktraro\",\n    json_string: \"JSON-karaktraro\",\n    e164: \"E.164-nombro\",\n    jwt: \"JWT\",\n    template_literal: \"enigo\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Nevalida enigo: atendi\\u011Dis \".concat(issue.expected, \", ricevi\\u011Dis \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Nevalida enigo: atendi\\u011Dis \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Nevalida opcio: atendi\\u011Dis unu el \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"Tro granda: atendi\\u011Dis ke \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"valoro\", \" havu \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"elementojn\");\n          return \"Tro granda: atendi\\u011Dis ke \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"valoro\", \" havu \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return \"Tro malgranda: atendi\\u011Dis ke \".concat(issue.origin, \" havu \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"Tro malgranda: atendi\\u011Dis ke \".concat(issue.origin, \" estu \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"Nevalida karaktraro: devas komenci\\u011Di per \\\"\".concat(_issue.prefix, \"\\\"\");\n          if (_issue.format === \"ends_with\") return \"Nevalida karaktraro: devas fini\\u011Di per \\\"\".concat(_issue.suffix, \"\\\"\");\n          if (_issue.format === \"includes\") return \"Nevalida karaktraro: devas inkluzivi \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"Nevalida karaktraro: devas kongrui kun la modelo \".concat(_issue.pattern);\n          return \"Nevalida \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"Nevalida nombro: devas esti oblo de \".concat(issue.divisor);\n      case \"unrecognized_keys\":\n        return \"Nekonata\".concat(issue.keys.length > 1 ? \"j\" : \"\", \" \\u015Dlosilo\").concat(issue.keys.length > 1 ? \"j\" : \"\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"Nevalida \\u015Dlosilo en \".concat(issue.origin);\n      case \"invalid_union\":\n        return \"Nevalida enigo\";\n      case \"invalid_element\":\n        return \"Nevalida valoro en \".concat(issue.origin);\n      default:\n        return \"Nevalida enigo\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
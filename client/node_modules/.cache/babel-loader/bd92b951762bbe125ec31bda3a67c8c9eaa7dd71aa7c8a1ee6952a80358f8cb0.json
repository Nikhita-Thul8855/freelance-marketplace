{"ast":null,"code":"import _objectSpread from\"C:/Users/PC/freelance-marketplace/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect,useCallback}from'react';import axios from'axios';// Configure axios base URL\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';axios.defaults.baseURL=API_URL;// Initial state\nconst initialState={gigs:[],myGigs:[],currentGig:null,loading:false,error:null,totalPages:0,currentPage:1};// Action types\nconst actionTypes={SET_LOADING:'SET_LOADING',SET_ERROR:'SET_ERROR',CLEAR_ERROR:'CLEAR_ERROR',SET_GIGS:'SET_GIGS',SET_MY_GIGS:'SET_MY_GIGS',SET_CURRENT_GIG:'SET_CURRENT_GIG',ADD_GIG:'ADD_GIG',UPDATE_GIG:'UPDATE_GIG',DELETE_GIG:'DELETE_GIG'};// Reducer\nconst gigReducer=(state,action)=>{switch(action.type){case actionTypes.SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:action.payload});case actionTypes.SET_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload,loading:false});case actionTypes.CLEAR_ERROR:return _objectSpread(_objectSpread({},state),{},{error:null});case actionTypes.SET_GIGS:return _objectSpread(_objectSpread({},state),{},{gigs:action.payload.data,totalPages:action.payload.pages,currentPage:action.payload.page,loading:false});case actionTypes.SET_MY_GIGS:return _objectSpread(_objectSpread({},state),{},{myGigs:action.payload,loading:false});case actionTypes.SET_CURRENT_GIG:return _objectSpread(_objectSpread({},state),{},{currentGig:action.payload,loading:false});case actionTypes.ADD_GIG:return _objectSpread(_objectSpread({},state),{},{myGigs:[action.payload,...state.myGigs],loading:false});case actionTypes.UPDATE_GIG:return _objectSpread(_objectSpread({},state),{},{myGigs:state.myGigs.map(gig=>gig._id===action.payload._id?action.payload:gig),currentGig:action.payload,loading:false});case actionTypes.DELETE_GIG:return _objectSpread(_objectSpread({},state),{},{myGigs:state.myGigs.filter(gig=>gig._id!==action.payload),loading:false});default:return state;}};// Create context\nconst GigContext=/*#__PURE__*/createContext();// Gig Provider component\nexport const GigProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(gigReducer,initialState);// Get all gigs (public)\nconst getGigs=useCallback(async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};dispatch({type:actionTypes.SET_LOADING,payload:true});try{const query=new URLSearchParams(filters).toString();const res=await axios.get(\"/gigs\".concat(query?\"?\".concat(query):''));dispatch({type:actionTypes.SET_GIGS,payload:res.data});}catch(error){var _error$response,_error$response$data;dispatch({type:actionTypes.SET_ERROR,payload:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to fetch gigs'});}},[]);// Get single gig\nconst getGig=useCallback(async id=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{const res=await axios.get(\"/gigs/\".concat(id));dispatch({type:actionTypes.SET_CURRENT_GIG,payload:res.data.data});}catch(error){var _error$response2,_error$response2$data;dispatch({type:actionTypes.SET_ERROR,payload:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch gig'});}},[]);// Get my gigs (protected)\nconst getMyGigs=useCallback(async()=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{const res=await axios.get('/gigs/my/gigs');dispatch({type:actionTypes.SET_MY_GIGS,payload:res.data.data});}catch(error){var _error$response3,_error$response3$data;dispatch({type:actionTypes.SET_ERROR,payload:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to fetch your gigs'});}},[]);// Create gig\nconst createGig=async gigData=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{console.log('Creating gig with data:',gigData);console.log('Auth token:',axios.defaults.headers.common['Authorization']);const res=await axios.post('/gigs',gigData,{headers:{'Content-Type':'multipart/form-data'}});dispatch({type:actionTypes.ADD_GIG,payload:res.data.data});return{success:true,data:res.data.data};}catch(error){var _error$response4,_error$response5,_error$response5$data;console.error('Error creating gig:',error);console.error('Response data:',(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data);const errorMessage=((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to create gig';dispatch({type:actionTypes.SET_ERROR,payload:errorMessage});return{success:false,error:errorMessage};}};// Update gig\nconst updateGig=async(id,gigData)=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{const res=await axios.put(\"/gigs/\".concat(id),gigData);dispatch({type:actionTypes.UPDATE_GIG,payload:res.data.data});return{success:true,data:res.data.data};}catch(error){var _error$response6,_error$response6$data;const errorMessage=((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Failed to update gig';dispatch({type:actionTypes.SET_ERROR,payload:errorMessage});return{success:false,error:errorMessage};}};// Delete gig\nconst deleteGig=async id=>{dispatch({type:actionTypes.SET_LOADING,payload:true});try{await axios.delete(\"/gigs/\".concat(id));dispatch({type:actionTypes.DELETE_GIG,payload:id});return{success:true};}catch(error){var _error$response7,_error$response7$data;const errorMessage=((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Failed to delete gig';dispatch({type:actionTypes.SET_ERROR,payload:errorMessage});return{success:false,error:errorMessage};}};// Clear error\nconst clearError=()=>{dispatch({type:actionTypes.CLEAR_ERROR});};return/*#__PURE__*/_jsx(GigContext.Provider,{value:_objectSpread(_objectSpread({},state),{},{getGigs,getGig,getMyGigs,createGig,updateGig,deleteGig,clearError}),children:children});};// Custom hook to use gig context\nexport const useGigs=()=>{const context=useContext(GigContext);if(!context){throw new Error('useGigs must be used within a GigProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from'./api';class PaymentService{/**\r\n   * Create Stripe checkout session\r\n   */static async createCheckoutSession(gigId){let requirements=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const response=await api.post('/payments/create-checkout-session',{gigId,requirements});return response.data;}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to create checkout session');}}/**\r\n   * Handle successful payment\r\n   */static async handlePaymentSuccess(sessionId){try{const response=await api.get(\"/payments/success?session_id=\".concat(sessionId));return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to process payment success');}}/**\r\n   * Get user orders\r\n   */static async getOrders(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const queryParams=new URLSearchParams(params).toString();const response=await api.get(\"/payments/orders?\".concat(queryParams));return response.data;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to fetch orders');}}/**\r\n   * Get specific order\r\n   */static async getOrder(orderId){try{const response=await api.get(\"/payments/orders/\".concat(orderId));return response.data;}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to fetch order');}}/**\r\n   * Request refund\r\n   */static async requestRefund(orderId){let reason=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{const response=await api.post(\"/payments/refund/\".concat(orderId),{reason});return response.data;}catch(error){var _error$response5,_error$response5$data;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to process refund');}}}export default PaymentService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
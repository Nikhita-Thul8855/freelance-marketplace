{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"aksara\",\n      verb: \"mempunyai\"\n    },\n    file: {\n      unit: \"bait\",\n      verb: \"mempunyai\"\n    },\n    array: {\n      unit: \"elemen\",\n      verb: \"mempunyai\"\n    },\n    set: {\n      unit: \"elemen\",\n      verb: \"mempunyai\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"nombor\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"input\",\n    email: \"alamat e-mel\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"tarikh masa ISO\",\n    date: \"tarikh ISO\",\n    time: \"masa ISO\",\n    duration: \"tempoh ISO\",\n    ipv4: \"alamat IPv4\",\n    ipv6: \"alamat IPv6\",\n    cidrv4: \"julat IPv4\",\n    cidrv6: \"julat IPv6\",\n    base64: \"string dikodkan base64\",\n    base64url: \"string dikodkan base64url\",\n    json_string: \"string JSON\",\n    e164: \"nombor E.164\",\n    jwt: \"JWT\",\n    template_literal: \"input\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Input tidak sah: dijangka ${issue.expected}, diterima ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Input tidak sah: dijangka ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Pilihan tidak sah: dijangka salah satu daripada ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} ${sizing.verb} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"elemen\"}`;\n          return `Terlalu besar: dijangka ${issue.origin ?? \"nilai\"} adalah ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Terlalu kecil: dijangka ${issue.origin} ${sizing.verb} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n          }\n          return `Terlalu kecil: dijangka ${issue.origin} adalah ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `String tidak sah: mesti bermula dengan \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `String tidak sah: mesti berakhir dengan \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `String tidak sah: mesti mengandungi \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `String tidak sah: mesti sepadan dengan corak ${_issue.pattern}`;\n          return `${Nouns[_issue.format] ?? issue.format} tidak sah`;\n        }\n      case \"not_multiple_of\":\n        return `Nombor tidak sah: perlu gandaan ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Kunci tidak dikenali: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Kunci tidak sah dalam ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Input tidak sah\";\n      case \"invalid_element\":\n        return `Nilai tidak sah dalam ${issue.origin}`;\n      default:\n        return `Input tidak sah`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { get as e, set as t } from \"react-hook-form\";\nconst r = (t, r, o) => {\n    if (t && \"reportValidity\" in t) {\n      const s = e(o, r);\n      t.setCustomValidity(s && s.message || \"\"), t.reportValidity();\n    }\n  },\n  o = (e, t) => {\n    for (const o in t.fields) {\n      const s = t.fields[o];\n      s && s.ref && \"reportValidity\" in s.ref ? r(s.ref, o, e) : s && s.refs && s.refs.forEach(t => r(t, o, e));\n    }\n  },\n  s = (r, s) => {\n    s.shouldUseNativeValidation && o(r, s);\n    const n = {};\n    for (const o in r) {\n      const f = e(s.fields, o),\n        c = Object.assign(r[o] || {}, {\n          ref: f && f.ref\n        });\n      if (i(s.names || Object.keys(r), o)) {\n        const r = Object.assign({}, e(n, o));\n        t(r, \"root\", c), t(n, o, r);\n      } else t(n, o, c);\n    }\n    return n;\n  },\n  i = (e, t) => {\n    const r = n(t);\n    return e.some(e => n(e).match(`^${r}\\\\.\\\\d+`));\n  };\nfunction n(e) {\n  return e.replace(/\\]|\\[/g, \"\");\n}\nexport { s as toNestErrors, o as validateFieldsNatively };\n//# sourceMappingURL=resolvers.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
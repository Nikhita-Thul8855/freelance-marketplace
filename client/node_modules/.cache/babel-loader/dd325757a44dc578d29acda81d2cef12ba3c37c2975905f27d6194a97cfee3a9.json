{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"tecken\",\n      verb: \"att ha\"\n    },\n    file: {\n      unit: \"bytes\",\n      verb: \"att ha\"\n    },\n    array: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    },\n    set: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"antal\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"lista\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"reguljärt uttryck\",\n    email: \"e-postadress\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO-datum och tid\",\n    date: \"ISO-datum\",\n    time: \"ISO-tid\",\n    duration: \"ISO-varaktighet\",\n    ipv4: \"IPv4-intervall\",\n    ipv6: \"IPv6-intervall\",\n    cidrv4: \"IPv4-spektrum\",\n    cidrv6: \"IPv6-spektrum\",\n    base64: \"base64-kodad sträng\",\n    base64url: \"base64url-kodad sträng\",\n    json_string: \"JSON-sträng\",\n    e164: \"E.164-nummer\",\n    jwt: \"JWT\",\n    template_literal: \"mall-literal\"\n  };\n  return issue => {\n    var _issue$origin5, _issue$origin6;\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Ogiltig inmatning: f\\xF6rv\\xE4ntat \".concat(issue.expected, \", fick \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Ogiltig inmatning: f\\xF6rv\\xE4ntat \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Ogiltigt val: f\\xF6rv\\xE4ntade en av \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            var _issue$origin, _sizing$unit;\n            return \"F\\xF6r stor(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"värdet\", \" att ha \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"element\");\n          }\n          return \"F\\xF6r stor(t): f\\xF6rv\\xE4ntat \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"värdet\", \" att ha \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          var _issue$origin4;\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            var _issue$origin3;\n            return \"F\\xF6r lite(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : \"värdet\", \" att ha \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"F\\xF6r lite(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : \"värdet\", \" att ha \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return \"Ogiltig str\\xE4ng: m\\xE5ste b\\xF6rja med \\\"\".concat(_issue.prefix, \"\\\"\");\n          }\n          if (_issue.format === \"ends_with\") return \"Ogiltig str\\xE4ng: m\\xE5ste sluta med \\\"\".concat(_issue.suffix, \"\\\"\");\n          if (_issue.format === \"includes\") return \"Ogiltig str\\xE4ng: m\\xE5ste inneh\\xE5lla \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"Ogiltig str\\xE4ng: m\\xE5ste matcha m\\xF6nstret \\\"\".concat(_issue.pattern, \"\\\"\");\n          return \"Ogiltig(t) \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"Ogiltigt tal: m\\xE5ste vara en multipel av \".concat(issue.divisor);\n      case \"unrecognized_keys\":\n        return \"\".concat(issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"Ogiltig nyckel i \".concat((_issue$origin5 = issue.origin) !== null && _issue$origin5 !== void 0 ? _issue$origin5 : \"värdet\");\n      case \"invalid_union\":\n        return \"Ogiltig input\";\n      case \"invalid_element\":\n        return \"Ogiltigt v\\xE4rde i \".concat((_issue$origin6 = issue.origin) !== null && _issue$origin6 !== void 0 ? _issue$origin6 : \"värdet\");\n      default:\n        return \"Ogiltig input\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"caractères\",\n      verb: \"avoir\"\n    },\n    file: {\n      unit: \"octets\",\n      verb: \"avoir\"\n    },\n    array: {\n      unit: \"éléments\",\n      verb: \"avoir\"\n    },\n    set: {\n      unit: \"éléments\",\n      verb: \"avoir\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"entrée\",\n    email: \"adresse courriel\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"date-heure ISO\",\n    date: \"date ISO\",\n    time: \"heure ISO\",\n    duration: \"durée ISO\",\n    ipv4: \"adresse IPv4\",\n    ipv6: \"adresse IPv6\",\n    cidrv4: \"plage IPv4\",\n    cidrv6: \"plage IPv6\",\n    base64: \"chaîne encodée en base64\",\n    base64url: \"chaîne encodée en base64url\",\n    json_string: \"chaîne JSON\",\n    e164: \"numéro E.164\",\n    jwt: \"JWT\",\n    template_literal: \"entrée\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Entrée invalide : attendu ${issue.expected}, reçu ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Entrée invalide : attendu ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Option invalide : attendu l'une des valeurs suivantes ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"≤\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} ait ${adj}${issue.maximum.toString()} ${sizing.unit}`;\n          return `Trop grand : attendu que ${issue.origin ?? \"la valeur\"} soit ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"≥\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `Trop petit : attendu que ${issue.origin} ait ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n          }\n          return `Trop petit : attendu que ${issue.origin} soit ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return `Chaîne invalide : doit commencer par \"${_issue.prefix}\"`;\n          }\n          if (_issue.format === \"ends_with\") return `Chaîne invalide : doit se terminer par \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Chaîne invalide : doit inclure \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Chaîne invalide : doit correspondre au motif ${_issue.pattern}`;\n          return `${Nouns[_issue.format] ?? issue.format} invalide`;\n        }\n      case \"not_multiple_of\":\n        return `Nombre invalide : doit être un multiple de ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Clé${issue.keys.length > 1 ? \"s\" : \"\"} non reconnue${issue.keys.length > 1 ? \"s\" : \"\"} : ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Clé invalide dans ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Entrée invalide\";\n      case \"invalid_element\":\n        return `Valeur invalide dans ${issue.origin}`;\n      default:\n        return `Entrée invalide`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
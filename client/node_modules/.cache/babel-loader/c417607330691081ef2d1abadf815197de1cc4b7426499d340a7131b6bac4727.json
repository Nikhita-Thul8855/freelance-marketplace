{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"caràcters\",\n      verb: \"contenir\"\n    },\n    file: {\n      unit: \"bytes\",\n      verb: \"contenir\"\n    },\n    array: {\n      unit: \"elements\",\n      verb: \"contenir\"\n    },\n    set: {\n      unit: \"elements\",\n      verb: \"contenir\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"entrada\",\n    email: \"adreça electrònica\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"data i hora ISO\",\n    date: \"data ISO\",\n    time: \"hora ISO\",\n    duration: \"durada ISO\",\n    ipv4: \"adreça IPv4\",\n    ipv6: \"adreça IPv6\",\n    cidrv4: \"rang IPv4\",\n    cidrv6: \"rang IPv6\",\n    base64: \"cadena codificada en base64\",\n    base64url: \"cadena codificada en base64url\",\n    json_string: \"cadena JSON\",\n    e164: \"número E.164\",\n    jwt: \"JWT\",\n    template_literal: \"entrada\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Tipus inv\\xE0lid: s'esperava \".concat(issue.expected, \", s'ha rebut \").concat(parsedType(issue.input));\n      // return `Tipus invàlid: s'esperava ${issue.expected}, s'ha rebut ${util.getParsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Valor inv\\xE0lid: s'esperava \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Opci\\xF3 inv\\xE0lida: s'esperava una de \".concat(util.joinValues(issue.values, \" o \"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"com a màxim\" : \"menys de\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"Massa gran: s'esperava que \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"el valor\", \" contingu\\xE9s \").concat(adj, \" \").concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"elements\");\n          return \"Massa gran: s'esperava que \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"el valor\", \" fos \").concat(adj, \" \").concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"com a mínim\" : \"més de\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return \"Massa petit: s'esperava que \".concat(issue.origin, \" contingu\\xE9s \").concat(adj, \" \").concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"Massa petit: s'esperava que \".concat(issue.origin, \" fos \").concat(adj, \" \").concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return \"Format inv\\xE0lid: ha de comen\\xE7ar amb \\\"\".concat(_issue.prefix, \"\\\"\");\n          }\n          if (_issue.format === \"ends_with\") return \"Format inv\\xE0lid: ha d'acabar amb \\\"\".concat(_issue.suffix, \"\\\"\");\n          if (_issue.format === \"includes\") return \"Format inv\\xE0lid: ha d'incloure \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"Format inv\\xE0lid: ha de coincidir amb el patr\\xF3 \".concat(_issue.pattern);\n          return \"Format inv\\xE0lid per a \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"N\\xFAmero inv\\xE0lid: ha de ser m\\xFAltiple de \".concat(issue.divisor);\n      case \"unrecognized_keys\":\n        return \"Clau\".concat(issue.keys.length > 1 ? \"s\" : \"\", \" no reconeguda\").concat(issue.keys.length > 1 ? \"s\" : \"\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"Clau inv\\xE0lida a \".concat(issue.origin);\n      case \"invalid_union\":\n        return \"Entrada invàlida\";\n      // Could also be \"Tipus d'unió invàlid\" but \"Entrada invàlida\" is more general\n      case \"invalid_element\":\n        return \"Element inv\\xE0lid a \".concat(issue.origin);\n      default:\n        return \"Entrada inv\\xE0lida\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
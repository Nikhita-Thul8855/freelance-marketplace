{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"字元\",\n      verb: \"擁有\"\n    },\n    file: {\n      unit: \"位元組\",\n      verb: \"擁有\"\n    },\n    array: {\n      unit: \"項目\",\n      verb: \"擁有\"\n    },\n    set: {\n      unit: \"項目\",\n      verb: \"擁有\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"輸入\",\n    email: \"郵件地址\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO 日期時間\",\n    date: \"ISO 日期\",\n    time: \"ISO 時間\",\n    duration: \"ISO 期間\",\n    ipv4: \"IPv4 位址\",\n    ipv6: \"IPv6 位址\",\n    cidrv4: \"IPv4 範圍\",\n    cidrv6: \"IPv6 範圍\",\n    base64: \"base64 編碼字串\",\n    base64url: \"base64url 編碼字串\",\n    json_string: \"JSON 字串\",\n    e164: \"E.164 數值\",\n    jwt: \"JWT\",\n    template_literal: \"輸入\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"\\u7121\\u6548\\u7684\\u8F38\\u5165\\u503C\\uFF1A\\u9810\\u671F\\u70BA \".concat(issue.expected, \"\\uFF0C\\u4F46\\u6536\\u5230 \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"\\u7121\\u6548\\u7684\\u8F38\\u5165\\u503C\\uFF1A\\u9810\\u671F\\u70BA \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"\\u7121\\u6548\\u7684\\u9078\\u9805\\uFF1A\\u9810\\u671F\\u70BA\\u4EE5\\u4E0B\\u5176\\u4E2D\\u4E4B\\u4E00 \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\u6578\\u503C\\u904E\\u5927\\uFF1A\\u9810\\u671F \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"值\", \" \\u61C9\\u70BA \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"個元素\");\n          return \"\\u6578\\u503C\\u904E\\u5927\\uFF1A\\u9810\\u671F \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"值\", \" \\u61C9\\u70BA \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return \"\\u6578\\u503C\\u904E\\u5C0F\\uFF1A\\u9810\\u671F \".concat(issue.origin, \" \\u61C9\\u70BA \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"\\u6578\\u503C\\u904E\\u5C0F\\uFF1A\\u9810\\u671F \".concat(issue.origin, \" \\u61C9\\u70BA \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return \"\\u7121\\u6548\\u7684\\u5B57\\u4E32\\uFF1A\\u5FC5\\u9808\\u4EE5 \\\"\".concat(_issue.prefix, \"\\\" \\u958B\\u982D\");\n          }\n          if (_issue.format === \"ends_with\") return \"\\u7121\\u6548\\u7684\\u5B57\\u4E32\\uFF1A\\u5FC5\\u9808\\u4EE5 \\\"\".concat(_issue.suffix, \"\\\" \\u7D50\\u5C3E\");\n          if (_issue.format === \"includes\") return \"\\u7121\\u6548\\u7684\\u5B57\\u4E32\\uFF1A\\u5FC5\\u9808\\u5305\\u542B \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"\\u7121\\u6548\\u7684\\u5B57\\u4E32\\uFF1A\\u5FC5\\u9808\\u7B26\\u5408\\u683C\\u5F0F \".concat(_issue.pattern);\n          return \"\\u7121\\u6548\\u7684 \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"\\u7121\\u6548\\u7684\\u6578\\u5B57\\uFF1A\\u5FC5\\u9808\\u70BA \".concat(issue.divisor, \" \\u7684\\u500D\\u6578\");\n      case \"unrecognized_keys\":\n        return \"\\u7121\\u6CD5\\u8B58\\u5225\\u7684\\u9375\\u503C\".concat(issue.keys.length > 1 ? \"們\" : \"\", \"\\uFF1A\").concat(util.joinValues(issue.keys, \"、\"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \" \\u4E2D\\u6709\\u7121\\u6548\\u7684\\u9375\\u503C\");\n      case \"invalid_union\":\n        return \"無效的輸入值\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \" \\u4E2D\\u6709\\u7121\\u6548\\u7684\\u503C\");\n      default:\n        return \"\\u7121\\u6548\\u7684\\u8F38\\u5165\\u503C\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
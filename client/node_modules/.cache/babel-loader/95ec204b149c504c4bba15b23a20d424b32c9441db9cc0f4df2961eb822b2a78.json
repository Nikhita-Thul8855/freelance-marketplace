{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"문자\",\n      verb: \"to have\"\n    },\n    file: {\n      unit: \"바이트\",\n      verb: \"to have\"\n    },\n    array: {\n      unit: \"개\",\n      verb: \"to have\"\n    },\n    set: {\n      unit: \"개\",\n      verb: \"to have\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"입력\",\n    email: \"이메일 주소\",\n    url: \"URL\",\n    emoji: \"이모지\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO 날짜시간\",\n    date: \"ISO 날짜\",\n    time: \"ISO 시간\",\n    duration: \"ISO 기간\",\n    ipv4: \"IPv4 주소\",\n    ipv6: \"IPv6 주소\",\n    cidrv4: \"IPv4 범위\",\n    cidrv6: \"IPv6 범위\",\n    base64: \"base64 인코딩 문자열\",\n    base64url: \"base64url 인코딩 문자열\",\n    json_string: \"JSON 문자열\",\n    e164: \"E.164 번호\",\n    jwt: \"JWT\",\n    template_literal: \"입력\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"\\uC798\\uBABB\\uB41C \\uC785\\uB825: \\uC608\\uC0C1 \\uD0C0\\uC785\\uC740 \".concat(issue.expected, \", \\uBC1B\\uC740 \\uD0C0\\uC785\\uC740 \").concat(parsedType(issue.input), \"\\uC785\\uB2C8\\uB2E4\");\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"\\uC798\\uBABB\\uB41C \\uC785\\uB825: \\uAC12\\uC740 \".concat(util.stringifyPrimitive(issue.values[0]), \" \\uC774\\uC5B4\\uC57C \\uD569\\uB2C8\\uB2E4\");\n        return \"\\uC798\\uBABB\\uB41C \\uC635\\uC158: \".concat(util.joinValues(issue.values, \"또는 \"), \" \\uC911 \\uD558\\uB098\\uC5EC\\uC57C \\uD569\\uB2C8\\uB2E4\");\n      case \"too_big\":\n        {\n          var _sizing$unit, _issue$origin, _issue$origin2;\n          const adj = issue.inclusive ? \"이하\" : \"미만\";\n          const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = (_sizing$unit = sizing === null || sizing === void 0 ? void 0 : sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"요소\";\n          if (sizing) return \"\".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"값\", \"\\uC774 \\uB108\\uBB34 \\uD07D\\uB2C8\\uB2E4: \").concat(issue.maximum.toString()).concat(unit, \" \").concat(adj).concat(suffix);\n          return \"\".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"값\", \"\\uC774 \\uB108\\uBB34 \\uD07D\\uB2C8\\uB2E4: \").concat(issue.maximum.toString(), \" \").concat(adj).concat(suffix);\n        }\n      case \"too_small\":\n        {\n          var _sizing$unit2, _issue$origin4;\n          const adj = issue.inclusive ? \"이상\" : \"초과\";\n          const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = (_sizing$unit2 = sizing === null || sizing === void 0 ? void 0 : sizing.unit) !== null && _sizing$unit2 !== void 0 ? _sizing$unit2 : \"요소\";\n          if (sizing) {\n            var _issue$origin3;\n            return \"\".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : \"값\", \"\\uC774 \\uB108\\uBB34 \\uC791\\uC2B5\\uB2C8\\uB2E4: \").concat(issue.minimum.toString()).concat(unit, \" \").concat(adj).concat(suffix);\n          }\n          return \"\".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : \"값\", \"\\uC774 \\uB108\\uBB34 \\uC791\\uC2B5\\uB2C8\\uB2E4: \").concat(issue.minimum.toString(), \" \").concat(adj).concat(suffix);\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return \"\\uC798\\uBABB\\uB41C \\uBB38\\uC790\\uC5F4: \\\"\".concat(_issue.prefix, \"\\\"(\\uC73C)\\uB85C \\uC2DC\\uC791\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4\");\n          }\n          if (_issue.format === \"ends_with\") return \"\\uC798\\uBABB\\uB41C \\uBB38\\uC790\\uC5F4: \\\"\".concat(_issue.suffix, \"\\\"(\\uC73C)\\uB85C \\uB05D\\uB098\\uC57C \\uD569\\uB2C8\\uB2E4\");\n          if (_issue.format === \"includes\") return \"\\uC798\\uBABB\\uB41C \\uBB38\\uC790\\uC5F4: \\\"\".concat(_issue.includes, \"\\\"\\uC744(\\uB97C) \\uD3EC\\uD568\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4\");\n          if (_issue.format === \"regex\") return \"\\uC798\\uBABB\\uB41C \\uBB38\\uC790\\uC5F4: \\uC815\\uADDC\\uC2DD \".concat(_issue.pattern, \" \\uD328\\uD134\\uACFC \\uC77C\\uCE58\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4\");\n          return \"\\uC798\\uBABB\\uB41C \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"\\uC798\\uBABB\\uB41C \\uC22B\\uC790: \".concat(issue.divisor, \"\\uC758 \\uBC30\\uC218\\uC5EC\\uC57C \\uD569\\uB2C8\\uB2E4\");\n      case \"unrecognized_keys\":\n        return \"\\uC778\\uC2DD\\uD560 \\uC218 \\uC5C6\\uB294 \\uD0A4: \".concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"\\uC798\\uBABB\\uB41C \\uD0A4: \".concat(issue.origin);\n      case \"invalid_union\":\n        return \"\\uC798\\uBABB\\uB41C \\uC785\\uB825\";\n      case \"invalid_element\":\n        return \"\\uC798\\uBABB\\uB41C \\uAC12: \".concat(issue.origin);\n      default:\n        return \"\\uC798\\uBABB\\uB41C \\uC785\\uB825\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
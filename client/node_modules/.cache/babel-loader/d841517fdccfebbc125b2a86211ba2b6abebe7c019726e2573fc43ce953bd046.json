{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"字符\",\n      verb: \"包含\"\n    },\n    file: {\n      unit: \"字节\",\n      verb: \"包含\"\n    },\n    array: {\n      unit: \"项\",\n      verb: \"包含\"\n    },\n    set: {\n      unit: \"项\",\n      verb: \"包含\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"非数字(NaN)\" : \"数字\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"数组\";\n          }\n          if (data === null) {\n            return \"空值(null)\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"输入\",\n    email: \"电子邮件\",\n    url: \"URL\",\n    emoji: \"表情符号\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO日期时间\",\n    date: \"ISO日期\",\n    time: \"ISO时间\",\n    duration: \"ISO时长\",\n    ipv4: \"IPv4地址\",\n    ipv6: \"IPv6地址\",\n    cidrv4: \"IPv4网段\",\n    cidrv6: \"IPv6网段\",\n    base64: \"base64编码字符串\",\n    base64url: \"base64url编码字符串\",\n    json_string: \"JSON字符串\",\n    e164: \"E.164号码\",\n    jwt: \"JWT\",\n    template_literal: \"输入\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"\\u65E0\\u6548\\u8F93\\u5165\\uFF1A\\u671F\\u671B \".concat(issue.expected, \"\\uFF0C\\u5B9E\\u9645\\u63A5\\u6536 \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"\\u65E0\\u6548\\u8F93\\u5165\\uFF1A\\u671F\\u671B \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"\\u65E0\\u6548\\u9009\\u9879\\uFF1A\\u671F\\u671B\\u4EE5\\u4E0B\\u4E4B\\u4E00 \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\u6570\\u503C\\u8FC7\\u5927\\uFF1A\\u671F\\u671B \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"值\", \" \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"个元素\");\n          return \"\\u6570\\u503C\\u8FC7\\u5927\\uFF1A\\u671F\\u671B \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"值\", \" \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return \"\\u6570\\u503C\\u8FC7\\u5C0F\\uFF1A\\u671F\\u671B \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"\\u6570\\u503C\\u8FC7\\u5C0F\\uFF1A\\u671F\\u671B \".concat(issue.origin, \" \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"\\u65E0\\u6548\\u5B57\\u7B26\\u4E32\\uFF1A\\u5FC5\\u987B\\u4EE5 \\\"\".concat(_issue.prefix, \"\\\" \\u5F00\\u5934\");\n          if (_issue.format === \"ends_with\") return \"\\u65E0\\u6548\\u5B57\\u7B26\\u4E32\\uFF1A\\u5FC5\\u987B\\u4EE5 \\\"\".concat(_issue.suffix, \"\\\" \\u7ED3\\u5C3E\");\n          if (_issue.format === \"includes\") return \"\\u65E0\\u6548\\u5B57\\u7B26\\u4E32\\uFF1A\\u5FC5\\u987B\\u5305\\u542B \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"\\u65E0\\u6548\\u5B57\\u7B26\\u4E32\\uFF1A\\u5FC5\\u987B\\u6EE1\\u8DB3\\u6B63\\u5219\\u8868\\u8FBE\\u5F0F \".concat(_issue.pattern);\n          return \"\\u65E0\\u6548\".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"\\u65E0\\u6548\\u6570\\u5B57\\uFF1A\\u5FC5\\u987B\\u662F \".concat(issue.divisor, \" \\u7684\\u500D\\u6570\");\n      case \"unrecognized_keys\":\n        return \"\\u51FA\\u73B0\\u672A\\u77E5\\u7684\\u952E(key): \".concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \" \\u4E2D\\u7684\\u952E(key)\\u65E0\\u6548\");\n      case \"invalid_union\":\n        return \"无效输入\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \" \\u4E2D\\u5305\\u542B\\u65E0\\u6548\\u503C(value)\");\n      default:\n        return \"\\u65E0\\u6548\\u8F93\\u5165\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
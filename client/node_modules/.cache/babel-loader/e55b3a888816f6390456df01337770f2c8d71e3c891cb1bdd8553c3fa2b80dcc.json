{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"حرف\",\n      verb: \"أن يحوي\"\n    },\n    file: {\n      unit: \"بايت\",\n      verb: \"أن يحوي\"\n    },\n    array: {\n      unit: \"عنصر\",\n      verb: \"أن يحوي\"\n    },\n    set: {\n      unit: \"عنصر\",\n      verb: \"أن يحوي\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"مدخل\",\n    email: \"بريد إلكتروني\",\n    url: \"رابط\",\n    emoji: \"إيموجي\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"تاريخ ووقت بمعيار ISO\",\n    date: \"تاريخ بمعيار ISO\",\n    time: \"وقت بمعيار ISO\",\n    duration: \"مدة بمعيار ISO\",\n    ipv4: \"عنوان IPv4\",\n    ipv6: \"عنوان IPv6\",\n    cidrv4: \"مدى عناوين بصيغة IPv4\",\n    cidrv6: \"مدى عناوين بصيغة IPv6\",\n    base64: \"نَص بترميز base64-encoded\",\n    base64url: \"نَص بترميز base64url-encoded\",\n    json_string: \"نَص على هيئة JSON\",\n    e164: \"رقم هاتف بمعيار E.164\",\n    jwt: \"JWT\",\n    template_literal: \"مدخل\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `مدخلات غير مقبولة: يفترض إدخال ${issue.expected}، ولكن تم إدخال ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `مدخلات غير مقبولة: يفترض إدخال ${util.stringifyPrimitive(issue.values[0])}`;\n        return `اختيار غير مقبول: يتوقع انتقاء أحد هذه الخيارات: ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return ` أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()} ${sizing.unit ?? \"عنصر\"}`;\n          return `أكبر من اللازم: يفترض أن تكون ${issue.origin ?? \"القيمة\"} ${adj} ${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()} ${sizing.unit}`;\n          }\n          return `أصغر من اللازم: يفترض لـ ${issue.origin} أن يكون ${adj} ${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `نَص غير مقبول: يجب أن يبدأ بـ \"${issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `نَص غير مقبول: يجب أن ينتهي بـ \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `نَص غير مقبول: يجب أن يتضمَّن \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `نَص غير مقبول: يجب أن يطابق النمط ${_issue.pattern}`;\n          return `${Nouns[_issue.format] ?? issue.format} غير مقبول`;\n        }\n      case \"not_multiple_of\":\n        return `رقم غير مقبول: يجب أن يكون من مضاعفات ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `معرف${issue.keys.length > 1 ? \"ات\" : \"\"} غريب${issue.keys.length > 1 ? \"ة\" : \"\"}: ${util.joinValues(issue.keys, \"، \")}`;\n      case \"invalid_key\":\n        return `معرف غير مقبول في ${issue.origin}`;\n      case \"invalid_union\":\n        return \"مدخل غير مقبول\";\n      case \"invalid_element\":\n        return `مدخل غير مقبول في ${issue.origin}`;\n      default:\n        return \"مدخل غير مقبول\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
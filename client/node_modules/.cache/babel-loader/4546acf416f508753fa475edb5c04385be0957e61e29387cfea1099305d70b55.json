{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"文字\",\n      verb: \"である\"\n    },\n    file: {\n      unit: \"バイト\",\n      verb: \"である\"\n    },\n    array: {\n      unit: \"要素\",\n      verb: \"である\"\n    },\n    set: {\n      unit: \"要素\",\n      verb: \"である\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"数値\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"配列\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"入力値\",\n    email: \"メールアドレス\",\n    url: \"URL\",\n    emoji: \"絵文字\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO日時\",\n    date: \"ISO日付\",\n    time: \"ISO時刻\",\n    duration: \"ISO期間\",\n    ipv4: \"IPv4アドレス\",\n    ipv6: \"IPv6アドレス\",\n    cidrv4: \"IPv4範囲\",\n    cidrv6: \"IPv6範囲\",\n    base64: \"base64エンコード文字列\",\n    base64url: \"base64urlエンコード文字列\",\n    json_string: \"JSON文字列\",\n    e164: \"E.164番号\",\n    jwt: \"JWT\",\n    template_literal: \"入力値\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"\\u7121\\u52B9\\u306A\\u5165\\u529B: \".concat(issue.expected, \"\\u304C\\u671F\\u5F85\\u3055\\u308C\\u307E\\u3057\\u305F\\u304C\\u3001\").concat(parsedType(issue.input), \"\\u304C\\u5165\\u529B\\u3055\\u308C\\u307E\\u3057\\u305F\");\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"\\u7121\\u52B9\\u306A\\u5165\\u529B: \".concat(util.stringifyPrimitive(issue.values[0]), \"\\u304C\\u671F\\u5F85\\u3055\\u308C\\u307E\\u3057\\u305F\");\n        return \"\\u7121\\u52B9\\u306A\\u9078\\u629E: \".concat(util.joinValues(issue.values, \"、\"), \"\\u306E\\u3044\\u305A\\u308C\\u304B\\u3067\\u3042\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"以下である\" : \"より小さい\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\u5927\\u304D\\u3059\\u304E\\u308B\\u5024: \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"値\", \"\\u306F\").concat(issue.maximum.toString()).concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"要素\").concat(adj, \"\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          return \"\\u5927\\u304D\\u3059\\u304E\\u308B\\u5024: \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"値\", \"\\u306F\").concat(issue.maximum.toString()).concat(adj, \"\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"以上である\" : \"より大きい\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"\\u5C0F\\u3055\\u3059\\u304E\\u308B\\u5024: \".concat(issue.origin, \"\\u306F\").concat(issue.minimum.toString()).concat(sizing.unit).concat(adj, \"\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          return \"\\u5C0F\\u3055\\u3059\\u304E\\u308B\\u5024: \".concat(issue.origin, \"\\u306F\").concat(issue.minimum.toString()).concat(adj, \"\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"\\u7121\\u52B9\\u306A\\u6587\\u5B57\\u5217: \\\"\".concat(_issue.prefix, \"\\\"\\u3067\\u59CB\\u307E\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          if (_issue.format === \"ends_with\") return \"\\u7121\\u52B9\\u306A\\u6587\\u5B57\\u5217: \\\"\".concat(_issue.suffix, \"\\\"\\u3067\\u7D42\\u308F\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          if (_issue.format === \"includes\") return \"\\u7121\\u52B9\\u306A\\u6587\\u5B57\\u5217: \\\"\".concat(_issue.includes, \"\\\"\\u3092\\u542B\\u3080\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          if (_issue.format === \"regex\") return \"\\u7121\\u52B9\\u306A\\u6587\\u5B57\\u5217: \\u30D1\\u30BF\\u30FC\\u30F3\".concat(_issue.pattern, \"\\u306B\\u4E00\\u81F4\\u3059\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n          return \"\\u7121\\u52B9\\u306A\".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"\\u7121\\u52B9\\u306A\\u6570\\u5024: \".concat(issue.divisor, \"\\u306E\\u500D\\u6570\\u3067\\u3042\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\");\n      case \"unrecognized_keys\":\n        return \"\\u8A8D\\u8B58\\u3055\\u308C\\u3066\\u3044\\u306A\\u3044\\u30AD\\u30FC\".concat(issue.keys.length > 1 ? \"群\" : \"\", \": \").concat(util.joinValues(issue.keys, \"、\"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \"\\u5185\\u306E\\u7121\\u52B9\\u306A\\u30AD\\u30FC\");\n      case \"invalid_union\":\n        return \"無効な入力\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \"\\u5185\\u306E\\u7121\\u52B9\\u306A\\u5024\");\n      default:\n        return \"\\u7121\\u52B9\\u306A\\u5165\\u529B\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
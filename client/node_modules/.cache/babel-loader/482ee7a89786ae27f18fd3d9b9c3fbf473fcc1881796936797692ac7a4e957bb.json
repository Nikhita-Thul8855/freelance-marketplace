{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"字符\",\n      verb: \"包含\"\n    },\n    file: {\n      unit: \"字节\",\n      verb: \"包含\"\n    },\n    array: {\n      unit: \"项\",\n      verb: \"包含\"\n    },\n    set: {\n      unit: \"项\",\n      verb: \"包含\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"非数字(NaN)\" : \"数字\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"数组\";\n          }\n          if (data === null) {\n            return \"空值(null)\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"输入\",\n    email: \"电子邮件\",\n    url: \"URL\",\n    emoji: \"表情符号\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO日期时间\",\n    date: \"ISO日期\",\n    time: \"ISO时间\",\n    duration: \"ISO时长\",\n    ipv4: \"IPv4地址\",\n    ipv6: \"IPv6地址\",\n    cidrv4: \"IPv4网段\",\n    cidrv6: \"IPv6网段\",\n    base64: \"base64编码字符串\",\n    base64url: \"base64url编码字符串\",\n    json_string: \"JSON字符串\",\n    e164: \"E.164号码\",\n    jwt: \"JWT\",\n    template_literal: \"输入\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `无效输入：期望 ${issue.expected}，实际接收 ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `无效输入：期望 ${util.stringifyPrimitive(issue.values[0])}`;\n        return `无效选项：期望以下之一 ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"个元素\"}`;\n          return `数值过大：期望 ${issue.origin ?? \"值\"} ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n          }\n          return `数值过小：期望 ${issue.origin} ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `无效字符串：必须以 \"${_issue.prefix}\" 开头`;\n          if (_issue.format === \"ends_with\") return `无效字符串：必须以 \"${_issue.suffix}\" 结尾`;\n          if (_issue.format === \"includes\") return `无效字符串：必须包含 \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `无效字符串：必须满足正则表达式 ${_issue.pattern}`;\n          return `无效${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `无效数字：必须是 ${issue.divisor} 的倍数`;\n      case \"unrecognized_keys\":\n        return `出现未知的键(key): ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `${issue.origin} 中的键(key)无效`;\n      case \"invalid_union\":\n        return \"无效输入\";\n      case \"invalid_element\":\n        return `${issue.origin} 中包含无效值(value)`;\n      default:\n        return `无效输入`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
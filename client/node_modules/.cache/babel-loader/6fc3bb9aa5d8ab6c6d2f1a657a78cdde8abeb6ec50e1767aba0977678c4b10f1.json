{"ast":null,"code":"import { _array, _tuple, _unknown } from \"./api.js\";\nimport { parse, parseAsync } from \"./parse.js\";\nimport * as schemas from \"./schemas.js\";\nimport { $ZodTuple } from \"./schemas.js\";\nexport class $ZodFunction {\n  constructor(def) {\n    this._def = def;\n    this.def = def;\n  }\n  implement(func) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"implement() must be called with a function\");\n    }\n    const impl = (...args) => {\n      const parsedArgs = this._def.input ? parse(this._def.input, args, undefined, {\n        callee: impl\n      }) : args;\n      if (!Array.isArray(parsedArgs)) {\n        throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n      }\n      const output = func(...parsedArgs);\n      return this._def.output ? parse(this._def.output, output, undefined, {\n        callee: impl\n      }) : output;\n    };\n    return impl;\n  }\n  implementAsync(func) {\n    if (typeof func !== \"function\") {\n      throw new Error(\"implement() must be called with a function\");\n    }\n    const impl = async (...args) => {\n      const parsedArgs = this._def.input ? await parseAsync(this._def.input, args, undefined, {\n        callee: impl\n      }) : args;\n      if (!Array.isArray(parsedArgs)) {\n        throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n      }\n      const output = await func(...parsedArgs);\n      return this._def.output ? parseAsync(this._def.output, output, undefined, {\n        callee: impl\n      }) : output;\n    };\n    return impl;\n  }\n  input(...args) {\n    const F = this.constructor;\n    if (Array.isArray(args[0])) {\n      return new F({\n        type: \"function\",\n        input: new $ZodTuple({\n          type: \"tuple\",\n          items: args[0],\n          rest: args[1]\n        }),\n        output: this._def.output\n      });\n    }\n    return new F({\n      type: \"function\",\n      input: args[0],\n      output: this._def.output\n    });\n  }\n  output(output) {\n    const F = this.constructor;\n    return new F({\n      type: \"function\",\n      input: this._def.input,\n      output\n    });\n  }\n}\nfunction _function(params) {\n  return new $ZodFunction({\n    type: \"function\",\n    input: Array.isArray(params?.input) ? _tuple(schemas.$ZodTuple, params?.input) : params?.input ?? _array(schemas.$ZodArray, _unknown(schemas.$ZodUnknown)),\n    output: params?.output ?? _unknown(schemas.$ZodUnknown)\n  });\n}\nexport { _function as function };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/** A special constant with type `never` */\nexport const NEVER = Object.freeze({\n  status: \"aborted\"\n});\nexport /*@__NO_SIDE_EFFECTS__*/function $constructor(name, initializer, params) {\n  function init(inst, def) {\n    var _a;\n    Object.defineProperty(inst, \"_zod\", {\n      value: inst._zod ?? {},\n      enumerable: false\n    });\n    (_a = inst._zod).traits ?? (_a.traits = new Set());\n    inst._zod.traits.add(name);\n    initializer(inst, def);\n    // support prototype modifications\n    for (const k in _.prototype) {\n      if (!(k in inst)) Object.defineProperty(inst, k, {\n        value: _.prototype[k].bind(inst)\n      });\n    }\n    inst._zod.constr = _;\n    inst._zod.def = def;\n  }\n  // doesn't work if Parent has a constructor with arguments\n  const Parent = params?.Parent ?? Object;\n  class Definition extends Parent {}\n  Object.defineProperty(Definition, \"name\", {\n    value: name\n  });\n  function _(def) {\n    var _a;\n    const inst = params?.Parent ? new Definition() : this;\n    init(inst, def);\n    (_a = inst._zod).deferred ?? (_a.deferred = []);\n    for (const fn of inst._zod.deferred) {\n      fn();\n    }\n    return inst;\n  }\n  Object.defineProperty(_, \"init\", {\n    value: init\n  });\n  Object.defineProperty(_, Symbol.hasInstance, {\n    value: inst => {\n      if (params?.Parent && inst instanceof params.Parent) return true;\n      return inst?._zod?.traits?.has(name);\n    }\n  });\n  Object.defineProperty(_, \"name\", {\n    value: name\n  });\n  return _;\n}\n//////////////////////////////   UTILITIES   ///////////////////////////////////////\nexport const $brand = Symbol(\"zod_brand\");\nexport class $ZodAsyncError extends Error {\n  constructor() {\n    super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);\n  }\n}\nexport const globalConfig = {};\nexport function config(newConfig) {\n  if (newConfig) Object.assign(globalConfig, newConfig);\n  return globalConfig;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
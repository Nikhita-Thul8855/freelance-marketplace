{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"harf\",\n      verb: \"olmalıdır\"\n    },\n    file: {\n      unit: \"bayt\",\n      verb: \"olmalıdır\"\n    },\n    array: {\n      unit: \"unsur\",\n      verb: \"olmalıdır\"\n    },\n    set: {\n      unit: \"unsur\",\n      verb: \"olmalıdır\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"numara\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"saf\";\n          }\n          if (data === null) {\n            return \"gayb\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"giren\",\n    email: \"epostagâh\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO hengâmı\",\n    date: \"ISO tarihi\",\n    time: \"ISO zamanı\",\n    duration: \"ISO müddeti\",\n    ipv4: \"IPv4 nişânı\",\n    ipv6: \"IPv6 nişânı\",\n    cidrv4: \"IPv4 menzili\",\n    cidrv6: \"IPv6 menzili\",\n    base64: \"base64-şifreli metin\",\n    base64url: \"base64url-şifreli metin\",\n    json_string: \"JSON metin\",\n    e164: \"E.164 sayısı\",\n    jwt: \"JWT\",\n    template_literal: \"giren\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"F\\xE2sit giren: umulan \".concat(issue.expected, \", al\\u0131nan \").concat(parsedType(issue.input));\n      // return `Fâsit giren: umulan ${issue.expected}, alınan ${util.getParsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"F\\xE2sit giren: umulan \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"F\\xE2sit tercih: m\\xFBteberler \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin, _sizing$unit, _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) return \"Fazla b\\xFCy\\xFCk: \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"value\", \", \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"elements\", \" sahip olmal\\u0131yd\\u0131.\");\n          return \"Fazla b\\xFCy\\xFCk: \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"value\", \", \").concat(adj).concat(issue.maximum.toString(), \" olmal\\u0131yd\\u0131.\");\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return \"Fazla k\\xFC\\xE7\\xFCk: \".concat(issue.origin, \", \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit, \" sahip olmal\\u0131yd\\u0131.\");\n          }\n          return \"Fazla k\\xFC\\xE7\\xFCk: \".concat(issue.origin, \", \").concat(adj).concat(issue.minimum.toString(), \" olmal\\u0131yd\\u0131.\");\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return \"F\\xE2sit metin: \\\"\".concat(_issue.prefix, \"\\\" ile ba\\u015Flamal\\u0131.\");\n          if (_issue.format === \"ends_with\") return \"F\\xE2sit metin: \\\"\".concat(_issue.suffix, \"\\\" ile bitmeli.\");\n          if (_issue.format === \"includes\") return \"F\\xE2sit metin: \\\"\".concat(_issue.includes, \"\\\" ihtiv\\xE2 etmeli.\");\n          if (_issue.format === \"regex\") return \"F\\xE2sit metin: \".concat(_issue.pattern, \" nak\\u015F\\u0131na uymal\\u0131.\");\n          return \"F\\xE2sit \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"F\\xE2sit say\\u0131: \".concat(issue.divisor, \" kat\\u0131 olmal\\u0131yd\\u0131.\");\n      case \"unrecognized_keys\":\n        return \"Tan\\u0131nmayan anahtar \".concat(issue.keys.length > 1 ? \"s\" : \"\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"\".concat(issue.origin, \" i\\xE7in tan\\u0131nmayan anahtar var.\");\n      case \"invalid_union\":\n        return \"Giren tanınamadı.\";\n      case \"invalid_element\":\n        return \"\".concat(issue.origin, \" i\\xE7in tan\\u0131nmayan k\\u0131ymet var.\");\n      default:\n        return \"K\\u0131ymet tan\\u0131namad\\u0131.\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from'./api';class OrderService{// Create a new order\nasync createOrder(gigId){let requirements=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let notes=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{const response=await api.post('/orders',{gigId,requirements,notes});return{success:true,data:response.data.data};}catch(error){var _error$response,_error$response$data;return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to create order'};}}// Get orders for current user\nasync getOrders(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const queryParams=new URLSearchParams();if(params.status)queryParams.append('status',params.status);if(params.page)queryParams.append('page',params.page.toString());if(params.limit)queryParams.append('limit',params.limit.toString());const response=await api.get(\"/orders?\".concat(queryParams.toString()));return{success:true,data:response.data.data,pagination:response.data.pagination};}catch(error){var _error$response2,_error$response2$data;return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to fetch orders'};}}// Get single order by ID\nasync getOrderById(orderId){try{const response=await api.get(\"/orders/\".concat(orderId));return{success:true,data:response.data.data};}catch(error){var _error$response3,_error$response3$data;return{success:false,error:((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to fetch order'};}}// Update order status\nasync updateOrderStatus(orderId,status){try{const response=await api.put(\"/orders/\".concat(orderId,\"/status\"),{status});return{success:true,data:response.data.data};}catch(error){var _error$response4,_error$response4$data;return{success:false,error:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to update order status'};}}// Get order statistics\nasync getOrderStats(){try{const response=await api.get('/orders/stats');return{success:true,data:response.data.data};}catch(error){var _error$response5,_error$response5$data;return{success:false,error:((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Failed to fetch order statistics'};}}// Helper method to get status badge color\ngetStatusColor(status){const colors={pending:'bg-yellow-100 text-yellow-800',paid:'bg-blue-100 text-blue-800',in_progress:'bg-orange-100 text-orange-800',completed:'bg-green-100 text-green-800',cancelled:'bg-red-100 text-red-800',refunded:'bg-gray-100 text-gray-800'};return colors[status]||'bg-gray-100 text-gray-800';}// Helper method to get status display text\ngetStatusText(status){const texts={pending:'Pending',paid:'Paid',in_progress:'In Progress',completed:'Completed',cancelled:'Cancelled',refunded:'Refunded'};return texts[status]||status;}// Helper method to check if status can be updated by user role\ncanUpdateStatus(order,userRole,newStatus){const currentStatus=order.status;if(userRole==='freelancer'){// Freelancer can mark paid orders as in_progress\nif(currentStatus==='paid'&&newStatus==='in_progress')return true;// Freelancer can mark in_progress orders as completed\nif(currentStatus==='in_progress'&&newStatus==='completed')return true;// Freelancer can cancel orders\nif(newStatus==='cancelled')return true;}if(userRole==='client'){// Client can cancel orders\nif(newStatus==='cancelled')return true;}return false;}}export default new OrderService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
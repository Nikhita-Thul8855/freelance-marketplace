{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"توکي\",\n      verb: \"ولري\"\n    },\n    file: {\n      unit: \"بایټس\",\n      verb: \"ولري\"\n    },\n    array: {\n      unit: \"توکي\",\n      verb: \"ولري\"\n    },\n    set: {\n      unit: \"توکي\",\n      verb: \"ولري\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"عدد\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"ارې\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"ورودي\",\n    email: \"بریښنالیک\",\n    url: \"یو آر ال\",\n    emoji: \"ایموجي\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"نیټه او وخت\",\n    date: \"نېټه\",\n    time: \"وخت\",\n    duration: \"موده\",\n    ipv4: \"د IPv4 پته\",\n    ipv6: \"د IPv6 پته\",\n    cidrv4: \"د IPv4 ساحه\",\n    cidrv6: \"د IPv6 ساحه\",\n    base64: \"base64-encoded متن\",\n    base64url: \"base64url-encoded متن\",\n    json_string: \"JSON متن\",\n    e164: \"د E.164 شمېره\",\n    jwt: \"JWT\",\n    template_literal: \"ورودي\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `ناسم ورودي: باید ${issue.expected} وای, مګر ${parsedType(issue.input)} ترلاسه شو`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) {\n          return `ناسم ورودي: باید ${util.stringifyPrimitive(issue.values[0])} وای`;\n        }\n        return `ناسم انتخاب: باید یو له ${util.joinValues(issue.values, \"|\")} څخه وای`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"عنصرونه\"} ولري`;\n          }\n          return `ډیر لوی: ${issue.origin ?? \"ارزښت\"} باید ${adj}${issue.maximum.toString()} وي`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} ${sizing.unit} ولري`;\n          }\n          return `ډیر کوچنی: ${issue.origin} باید ${adj}${issue.minimum.toString()} وي`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return `ناسم متن: باید د \"${_issue.prefix}\" سره پیل شي`;\n          }\n          if (_issue.format === \"ends_with\") {\n            return `ناسم متن: باید د \"${_issue.suffix}\" سره پای ته ورسيږي`;\n          }\n          if (_issue.format === \"includes\") {\n            return `ناسم متن: باید \"${_issue.includes}\" ولري`;\n          }\n          if (_issue.format === \"regex\") {\n            return `ناسم متن: باید د ${_issue.pattern} سره مطابقت ولري`;\n          }\n          return `${Nouns[_issue.format] ?? issue.format} ناسم دی`;\n        }\n      case \"not_multiple_of\":\n        return `ناسم عدد: باید د ${issue.divisor} مضرب وي`;\n      case \"unrecognized_keys\":\n        return `ناسم ${issue.keys.length > 1 ? \"کلیډونه\" : \"کلیډ\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `ناسم کلیډ په ${issue.origin} کې`;\n      case \"invalid_union\":\n        return `ناسمه ورودي`;\n      case \"invalid_element\":\n        return `ناسم عنصر په ${issue.origin} کې`;\n      default:\n        return `ناسمه ورودي`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
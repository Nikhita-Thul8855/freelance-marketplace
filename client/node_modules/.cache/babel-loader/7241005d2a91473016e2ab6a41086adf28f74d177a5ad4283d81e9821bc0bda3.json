{"ast":null,"code":"export class Doc {\n  constructor() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.content = [];\n    this.indent = 0;\n    if (this) this.args = args;\n  }\n  indented(fn) {\n    this.indent += 1;\n    fn(this);\n    this.indent -= 1;\n  }\n  write(arg) {\n    if (typeof arg === \"function\") {\n      arg(this, {\n        execution: \"sync\"\n      });\n      arg(this, {\n        execution: \"async\"\n      });\n      return;\n    }\n    const content = arg;\n    const lines = content.split(\"\\n\").filter(x => x);\n    const minIndent = Math.min(...lines.map(x => x.length - x.trimStart().length));\n    const dedented = lines.map(x => x.slice(minIndent)).map(x => \" \".repeat(this.indent * 2) + x);\n    for (const line of dedented) {\n      this.content.push(line);\n    }\n  }\n  compile() {\n    var _this$content;\n    const F = Function;\n    const args = this === null || this === void 0 ? void 0 : this.args;\n    const content = (_this$content = this === null || this === void 0 ? void 0 : this.content) !== null && _this$content !== void 0 ? _this$content : [\"\"];\n    const lines = [...content.map(x => \"  \".concat(x))];\n    // console.log(lines.join(\"\\n\"));\n    return new F(...args, lines.join(\"\\n\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as util from \"../core/util.js\";\nfunction getBelarusianPlural(count, one, few, many) {\n  const absCount = Math.abs(count);\n  const lastDigit = absCount % 10;\n  const lastTwoDigits = absCount % 100;\n  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n    return many;\n  }\n  if (lastDigit === 1) {\n    return one;\n  }\n  if (lastDigit >= 2 && lastDigit <= 4) {\n    return few;\n  }\n  return many;\n}\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: {\n        one: \"сімвал\",\n        few: \"сімвалы\",\n        many: \"сімвалаў\"\n      },\n      verb: \"мець\"\n    },\n    array: {\n      unit: {\n        one: \"элемент\",\n        few: \"элементы\",\n        many: \"элементаў\"\n      },\n      verb: \"мець\"\n    },\n    set: {\n      unit: {\n        one: \"элемент\",\n        few: \"элементы\",\n        many: \"элементаў\"\n      },\n      verb: \"мець\"\n    },\n    file: {\n      unit: {\n        one: \"байт\",\n        few: \"байты\",\n        many: \"байтаў\"\n      },\n      verb: \"мець\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"лік\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"масіў\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"увод\",\n    email: \"email адрас\",\n    url: \"URL\",\n    emoji: \"эмодзі\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO дата і час\",\n    date: \"ISO дата\",\n    time: \"ISO час\",\n    duration: \"ISO працягласць\",\n    ipv4: \"IPv4 адрас\",\n    ipv6: \"IPv6 адрас\",\n    cidrv4: \"IPv4 дыяпазон\",\n    cidrv6: \"IPv6 дыяпазон\",\n    base64: \"радок у фармаце base64\",\n    base64url: \"радок у фармаце base64url\",\n    json_string: \"JSON радок\",\n    e164: \"нумар E.164\",\n    jwt: \"JWT\",\n    template_literal: \"увод\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Няправільны ўвод: чакаўся ${issue.expected}, атрымана ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Няправільны ўвод: чакалася ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Няправільны варыянт: чакаўся адзін з ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const maxValue = Number(issue.maximum);\n            const unit = getBelarusianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна ${sizing.verb} ${adj}${issue.maximum.toString()} ${unit}`;\n          }\n          return `Занадта вялікі: чакалася, што ${issue.origin ?? \"значэнне\"} павінна быць ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const minValue = Number(issue.minimum);\n            const unit = getBelarusianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Занадта малы: чакалася, што ${issue.origin} павінна ${sizing.verb} ${adj}${issue.minimum.toString()} ${unit}`;\n          }\n          return `Занадта малы: чакалася, што ${issue.origin} павінна быць ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `Няправільны радок: павінен пачынацца з \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `Няправільны радок: павінен заканчвацца на \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Няправільны радок: павінен змяшчаць \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Няправільны радок: павінен адпавядаць шаблону ${_issue.pattern}`;\n          return `Няправільны ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Няправільны лік: павінен быць кратным ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Нераспазнаны ${issue.keys.length > 1 ? \"ключы\" : \"ключ\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Няправільны ключ у ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Няправільны ўвод\";\n      case \"invalid_element\":\n        return `Няправільнае значэнне ў ${issue.origin}`;\n      default:\n        return `Няправільны ўвод`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}